Class DSCcast1: DSCcast
{
	States
	{
		Spawn:
			CST1 A 1 NODELAY a_fadeOut(1.0, false);
		Goto Halt;
	}
}
Class DSCcast2: DSCcast
{
	States
	{
		Spawn:
			CST2 A 1 NODELAY a_fadeOut(1.0, false);
		Goto Halt;
	}
}
Class DSCcast3: DSCcast
{
	States
	{
		Spawn:
			CST3 A 1 NODELAY a_fadeOut(1.0, false);
		Goto Halt;
	}
}
Class DSCcast4: DSCcast
{
	States
	{
		Spawn:
			CST4 A 1 NODELAY a_fadeOut(1.0, false);
		Goto Halt;
	}
}
Class DSCcast5: DSCcast
{
	States
	{
		Spawn:
			CST5 A 1 NODELAY a_fadeOut(1.0, false);
		Goto Halt;
	}
}
Class DSCcast6: DSCcast
{
	States
	{
		Spawn:
			CST6 A 1 NODELAY a_fadeOut(1.0, false);
		Goto Halt;
	}
}
Class DSCcast : SwitchableDecoration
{
	bool startfade;
	int Counter;
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+WALLSPRITE;
		Scale 0.1;
		alpha 0.0;
	}
	States
	{

		Inactive:
			"####" "#" 1;
			Loop;
		Active:
			"####" "#" 1 {

					if(alpha<1.0 && !startfade){
						a_fadein(0.005, FTF_CLAMP);
					}
					if(alpha>=1.0 && !startfade){
						Counter++;
						if(Counter>=35*10){ startfade = true;}
					}
					if(startfade){ a_fadeOut(0.005);}
				}
			Loop;
		Halt:
			"####" "#" 1;
			Loop;
	}
}

Class DSCtitle2 : SwitchableDecoration
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+FORCEYBILLBOARD;
		Scale 0.1;
		alpha 0.0;
	}
	States
	{
		Spawn:
			TNT1 A 1;
		Goto Halt;
		Inactive:
			TNT1 A 1;
			Loop;
		Active:
			DSCT A 1 {
					a_fadein(0.005, FTF_CLAMP);
				}
			Loop;
		Halt:
			TNT1 A 1;
			Loop;
	}
}


Class DoomSlayerGliphIntro : Actor
{
	Default
	{
	RenderStyle "Add";
	Scale 0.1;
	alpha 0.0;
	+NOGRAVITY;
	+DONTSPLASH;
	+FORCEXYBILLBOARD;
	+NOCLIP;
	-SOLID;
	}

	States
	{
		Spawn:
			DSGL B 1 Light("AIDlight")
			{
			a_fadein(0.002, FTF_CLAMP);
			A_SpawnItemEx("MorFlareShade", random(-8, 8), random(-8, 8), random(24, 32), 0, 0, frandom(0.2,0.7),0,SXF_NOCHECKPOSITION, 240, 0);
			}

		LOOP;
	}
}


class DSCintro : Actor
{
	int timer;
	int delay;


	Override void Tick()
	{
		timer++;
		if(timer==1){A_PlaySound ("LOWPUM", 1, 1.0, false, ATTN_NONE);}
		if(timer<35*5){
			a_fadein(0.01, FTF_CLAMP);
		}

		if(timer>35*10 && timer<35*13){
			A_FadeOut(0.01, false);
		}
		if(timer==35*13){
			SetStateLabel("Label1");
			A_PlaySound ("LOWPUM", 1, 1.0, false, ATTN_NONE);
		}
		if(timer>35*13 && timer<35*20){
			a_fadein(0.01, FTF_CLAMP);
		}
		if(timer>35*20 && timer<35*23){
			A_FadeOut(0.01, false);
		}
		if(timer==35*23){
			SetStateLabel("Label2");
			A_PlaySound ("LOWPUM", 1, 1.0, false, ATTN_NONE);
			ACS_NamedExecute("activate",0,5,0);
			ACS_NamedExecute("MusicOn",0,0,0);

		}
		if(timer>35*23 && timer<35*33){
			a_fadein(0.01, FTF_CLAMP);
		}
		if(timer>35*33 && timer<35*38){
			A_FadeOut(0.01, false);
		}
		if(timer>35*38 && timer<(35*38)+(35*38)){
			a_fadein(0.01, FTF_CLAMP);
		}
		if(timer==35*38){
			SetStateLabel("Label3");
			A_PlaySound ("INTRO", 1, 1.0, false, ATTN_NONE);
		}
		if(timer>(35*38)+(35*38)){
			A_FadeOut(0.01, false);
		}
		if(timer==(35*38)+(35*38)){
			A_PlaySound ("world/suspense", 1, 1.0, false, ATTN_NONE);
			ACS_NamedExecute("MusicOff",0,0,0);

		}
		if(timer==(35*38)+(35*38)+(35*3)){
			ACS_NamedExecute("sign",0,0,0);
		}

		if(timer==(35*38)+(35*38)+(35*20)){
			ACS_NamedExecute("map01",0,0,0);
		}


		Super.Tick();
	}

	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		Alpha 0.0;
		Scale 0.25;
		Renderstyle "Translucent";
	}
	States
	{
		Spawn:
			INTR A 1;
			Loop;
		Label1:
			INTR B 1;
			Loop;
		Label2:
			INTR C 1;
			Loop;
		Label3:
			INTR D 1;
			Loop;
		Label4:
			INTR E 1;
			Loop;
	}

}


Class SkyViewpointMover : SwitchableDecoration
{
	MoveIterator Mover;
	Default
	{
		+NOINTERACTION;
	}
	virtual void InitMover()
	{

		//Mover.DestroyActors("SkyViewpoint", 128);
		//Mover.DoMoveActors("SkyViewpoint", double distance)
		Mover.MoveActors("SkyViewpoint", "MapSpot", args[0], 256);
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
		Active:
			TNT1 A 1 InitMover();
			Goto Incative;
		Inactive:
			TNT1 A 1;
			Loop;
	}
}

struct MoveIterator play
{
    private Actor caller;
    private Actor mover;

    private void PrintErrorMessage(int message)
    {
        string errorMessage = "";
        switch (message)
        {
            case -1:
                errorMessage = "No Actor specified";
            break;

            case -2:
                errorMessage = "No caller specified";
            break;

            case 3:
                errorMessage = "No actor founded";
            break;
            Default: break;
        }
        Console.Printf(errorMessage);
    }

    void Init(Actor mo)
    {
        if(mo) caller = mo;
    }

    void MoveActors(Class<Actor> actorType, Class<Actor> moverType, int tid, double distance)
    {
        if(caller)
        {
            int semiResult = FindMoverActor(moverType, tid);
            if( semiResult <= 0)
            {
                PrintErrorMessage(semiResult);
                return;
            }
            int result = DoMoveActors(actorType, distance);

            if(result < 0)
            {
                PrintErrorMessage(result);
                return;
            }
        }
    }

   private int FindMoverActor(Class<Actor> actorType, int tid)
   {
        if(!actorType) return -1;
        ThinkerIterator thingFinder = ThinkerIterator.Create(actorType);
        Actor mo;
        while (mo = Actor(thingFinder.Next()))
        {
            if (mo.TID == tid)
            {
                mover = mo;
                return 1;
            }
        }
        return -3;
   }

    private int DoMoveActors(Class<Actor> actorType, double distance)
    {
        if(!actorType) return -1;
        if(!caller) return -2;

        ThinkerIterator it = ThinkerIterator.Create(actorType);

        Actor mo;
        while(mo = Actor(it.Next()))
        {
            /*if (!(mo is actorType) || mo == caller || mo is "PlayerPawn") continue;

            if( mo is "Inventory")
            {
                let inv = Inventory(mo);
                if(inv.Owner != Null) continue;
            }*/

            if(distance <= 0.0 || caller.Distance3D(mo) <= distance)
            {
                mo.SetOrigin(mover.pos,true);
                continue;
            }
        }

        return 0;
    }
}



Class DSCGREATeyeBounder : Actor
{
	bool IsDead;
	vector3 oldpos;
	Default
	{
		Health 2000;
		Radius 128;
		Height 256;
		DeathHeight 16;
		Mass 3000;
		Accuracy 5;
		PainChance 128;
		MeleeRange 1024;
		+NOGRAVITY
		+SOLID;
		+SHOOTABLE;
		-PUSHABLE;
		YScale 1.0;
		XScale 1.0;
		+FLOATBOB;
		FloatBobStrength 0.5;
		PainSound "EYEPAIN";
		+ALWAYSFAST;
		+MISSILEEVENMORE;
		+ROLLSPRITE;
	}
	Override void PostBeginPlay()
	{

		oldpos = pos;
		Super.PostBeginPlay();
	}
	void SpawnBlood(int count = 5)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DSCbloodTrail", 0, 0, random(32, 40), frandom(-6,6), frandom(-6,6), frandom(0.5,3),0,SXF_NOCHECKPOSITION);
		}
	}
	void SpawnDeathBlood(int count = 5)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DSCbloodTrail", 0, 0, random(32, 40), frandom(-12,12), frandom(-12,12), frandom(0.5,12),0,SXF_NOCHECKPOSITION);
		}
	}
	Override void Tick()
	{

		if(!IsDead){
			SetXYZ(oldpos);

		} else {
			if(scale.Y>0.1){
				scale.Y-=0.01;
			}
		}
		Super.Tick();
	}
	States
	{
		Spawn:
			HEYE AAABCB 10
		{
			A_PlaySound("eyebound/active", 7, 1.0, true);
			A_chase("Melee", "Missle");
			if ( Random(1,101) > 50)
			{
				frame = random(0,2);
			}
		}
			LOOP;
		Pain:
			HEYE DDDE 5
			{
				A_PlaySound("EYEPAIN");
				SpawnBlood();
			}
			GOTO Spawn;
		Melee:
			HEYE DDDE 25{
				A_PlaySound("puresoul/attack", CHAN_WEAPON, 1.0, false, ATTN_NONE);
				A_SpawnItemEx("DSCbigPortalGliphBig", 0, 0, 128, 0, 0, 0,0,SXF_NOCHECKPOSITION);

				A_Explode(damage:random(32, 64), distance:768, flags:XF_NOTMISSILE);
				A_Blast(strength:1024, radius:1024);
			}
			GOTO Halt;
		Missle:
			HEYE DDDE 25 A_FaceTarget(0, 0, 0, 0, FAF_BOTTOM);
			HEYE E 25 A_SpawnProjectile("GeatBounderSpawnBall", 128, 0, frandom(-0.5, 0.5));
			HEYE E 25 A_jump(256, 1, 2);
			HEYE E 25 A_SpawnProjectile("GeatBounderSpawnBall", 128, 0, frandom(-0.5, 0.5));
			HEYE E 25 A_jump(256, 1, 2);
			HEYE E 25 A_SpawnProjectile("GeatBounderSpawnBall", 128, 0, frandom(-0.5, 0.5));
			GOTO Spawn;
		Halt:
			HEYE AAABCB 10;
			HEYE AAABCB 10;
			HEYE AAABCB 10;
			GOTO Spawn;
		Death:
			TNT1 A 0 {
				A_PlaySound("eyebound/death", 7, 1.0, false, ATTN_NONE);
				bFLOATBOB = false;
				IsDead = true;
			}
			HEYE DE 10 SpawnDeathBlood(15);
			HEYE F 10 SpawnDeathBlood(15);
			HEYE G 10 SpawnDeathBlood(15);
			HEYE H 10 SpawnDeathBlood(15);
			HEYE K 10 SpawnDeathBlood(15);
			HEYE L 10 SpawnDeathBlood(15);
			Goto Gone;
		Gone:
			HEYE L 1 A_fadeOut(0,01);
			loop;
	}
}
Class GeatBounderSpawnBall : Actor
{
	Default
	{
		Radius 4;
		Height 4;
		Speed 40;
		FastSpeed 80;
		Damage 3;
		Projectile;
		+FORCEXYBILLBOARD;
		+ROLLSPRITE;

		RenderStyle "Add";
		Alpha 1;
		Scale 1.0;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	Action Void SpawnBurstSparks(int count = 20)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("FireFlameGreat", random(4, 4), random(4, 4), random(4, 4), frandom(-8,8), frandom(-8,8), frandom(-8,8),0,SXF_NOCHECKPOSITION);
		}
	}
	States
	{
		Spawn:
			HALR A 1 light("DSCtorchLight") {
				A_SpawnItemEx("FireFlame", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION);
				A_SetRoll(roll+6,SPF_INTERPOLATE);
			}
			Loop;
		Death:
			TNT1 AAAA 6 light("DSCtorchLight") {
				SpawnBurstSparks();
			}
			TNT1 A 1 A_jump(256, 1, 3, 5);

			TNT1 A 10 A_SpawnItemEx("TeleportFog", 0, 0, 0, 0, 0, 0, 0);
			TNT1 A 0 A_SpawnItemEx("DoomImp", 0, 0, 0, 0, 0, 0, 0);
			Stop;
			TNT1 A 10 A_SpawnItemEx("TeleportFog", 0, 0, 0, 0, 0, 0, 0);
			TNT1 A 0 A_SpawnItemEx("Demon", 0, 0, 0, 0, 0, 0, 0);
			Stop;
			TNT1 A 10 A_SpawnItemEx("TeleportFog", 0, 0, 0, 0, 0, 0, 0);
			TNT1 A 0 A_SpawnItemEx("Cacodemon", 0, 0, 0, 0, 0, 0, 0);
			Stop;
	}
}

Class SkyViewpointDestroyer : SwitchableDecoration
{
	DestroyIterator dIt;
	Default
	{
		+NOINTERACTION;
	}
	virtual void InitDestroyer()
	{
		dIt.Init(self);
		dIt.DestroyActors("SkyViewpoint", 128);
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
		Active:
			TNT1 A 1 InitDestroyer();
			Goto Incative;
		Inactive:
			TNT1 A 1;
			Loop;
	}
}


class ActivateDeactivate play
{
	static void ActivateByTid(actor caller, int tid)
	{
		ThinkerIterator thingFinder = ThinkerIterator.Create("Actor");
		Actor mo;
		while (mo = Actor(thingFinder.Next()))
		{
			if (mo is "PlayerPawn") continue;
			if (mo.TID == tid)
			{
				ActivateActor(caller,mo);
				break;
			}
		}
	}

	static void DeactivateByTid(actor caller, int tid)
	{
		ThinkerIterator thingFinder = ThinkerIterator.Create("Actor");
		Actor mo;
		while (mo = Actor(thingFinder.Next()))
		{

			if (mo is "PlayerPawn")  continue;

			if (mo.TID == tid)
			{

				DeactivateActor(caller,mo);
				break;
			}
		}
	}

	static void ActivateActor(actor caller, actor thing)
	{
		if(thing.activationtype & THINGSPEC_Activate)
		{
			thing.activationtype &= ~THINGSPEC_Activate; // Clear flag
			if (thing.activationtype & THINGSPEC_Switch) // Set other flag if switching
				thing.activationtype |= THINGSPEC_Deactivate;
		}
		thing.Activate(caller);
	}

	static void DeactivateActor(actor caller, actor thing)
	{
		if(thing.activationtype & THINGSPEC_Deactivate)
		{
			thing.activationtype &= ~THINGSPEC_Deactivate; // Clear flag
			if (thing.activationtype & THINGSPEC_Switch) // Set other flag if switching
				thing.activationtype |= THINGSPEC_Activate;
		}
		thing.Deactivate(caller);
	}
}


Class AIDI : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.1;
	RenderStyle "Add";
	+NoInteraction;
	DistanceCheck "user_MaxDrawDistanceAMMOsparks";
	}
	States
	{
		Spawn:
			AIDI ABCDEFABCDEF 1 BRIGHT A_FadeOut(0.07);
		stop;
		Death:
			TNT1 A 1;
		stop;
	}
}
Class DSCHealthBonus : HealthBonus
{
	Default
	{
	-INVENTORY.ALWAYSPICKUP;
	Inventory.Amount 1;
	Inventory.MaxAmount 200;
	}
}
Class DSCbasicArmorBonus : ArmorBonus
{
	Default
	{
	-INVENTORY.ALWAYSPICKUP;
	Inventory.Amount 1;
	Inventory.MaxAmount 200;
	}
}
Class AIDHealth : HealthBonus
{
	Default
	{
	-INVENTORY.ALWAYSPICKUP;
	Inventory.Amount 1;
	Inventory.MaxAmount 100;
	}
}
Class DSCarmorBonus : ArmorBonus
{
	Default
	{
	-INVENTORY.ALWAYSPICKUP;
	Armor.SaveAmount 2;
	}
}
Class DSCarmorBonus5 : ArmorBonus
{
	Default
	{
	-INVENTORY.ALWAYSPICKUP;
	Armor.SaveAmount 5;
	}
}
Class DSCarmorBonus10 : ArmorBonus
{
	Default
	{
	-INVENTORY.ALWAYSPICKUP;
	Armor.SaveAmount 10;
	}
}

Class DSChealthBonus400 : Health
{
	Default
	{
		-INVENTORY.ALWAYSPICKUP;
		Inventory.Amount 1;
		Inventory.MaxAmount 400;
	}
}
Class AIDSpawner : Actor
{
	int giveHealthCount;
	bool alreadyHealed;
	int timerCount;
	int timerWaitForAgainHealingInSec;

	Default
	{
		+FORCEXYBILLBOARD;
		+NoGravity;
		+FLOATBOB;
		Renderstyle "Translucent";
		Scale 0.3;
	}

	Override void PostBeginPlay()
	{
		giveHealthCount = 1;
		timerCount = 0;

		PlayerInfo players = players[consoleplayer];
		int spawnFactor =  Cvar.GetCVar("dsc_spawn_factor", players).GetInt();

		timerWaitForAgainHealingInSec = 35*CallACS("GetAIDhealthRecallTime",0,0,0)/spawnFactor;
		alreadyHealed = false;
		Super.PostBeginPlay();
	}

	Action Void SpawnBurstAidi(int count = 26)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("AIDI", 0, 0, random(32, 40), frandom(-6,6), frandom(-6,6), frandom(0.5,3),0,SXF_NOCHECKPOSITION);
		}
	}

	Override void Tick()
	{
		if(alreadyHealed)
		{
			PlayerInfo players = players[consoleplayer];
			int spawnFactor =  Cvar.GetCVar("dsc_spawn_factor", players).GetInt();

			timerWaitForAgainHealingInSec = 35*CallACS("GetAIDhealthRecallTime",0,0,0)/spawnFactor;

			if(timerCount > timerWaitForAgainHealingInSec)
			{
				CallACS("AidRespawned",CallACS("GetAIDhealthRecallTime",0,0,0),0,0);
				timerCount = 0;
				alreadyHealed = false;
				giveHealthCount = 1;
				SetStateLabel("Spawn");
				A_SpawnItemEx( "ItemSpawnFog", 0, 0, 0, 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
			}
			else
			{
			SetStateLabel("Invisible");
			}
			timerCount += 1;
		}
		else
		{

			giveHealthCount -= A_RadiusGive("AIDHealth", 64.0, RGF_PLAYERS, 1);
			if (giveHealthCount <= 0)
			{
				A_RadiusGive("AIDHealth", 64.0, RGF_PLAYERS, CallACS("GetAIDhealthAmount",0,0,0)-1);
				if(CallACS("BE",0,0,0,0)){
					//A_printBold("ok");
					//A_RadiusGive("DSCarmorBonus5", 64.0, RGF_PLAYERS, 5);
				}
				CallACS("strongholdHealArmorBonus",0,0,0);

				A_PlaySound("PickupHealth", CHAN_BODY, 1.0, 0, ATTN_NONE);
				alreadyHealed = true;
				SpawnBurstAidi();
			}
			if(CheckSight(players[0].mo, 0)){
				A_SpawnItemEx("AIDI", random(-4,4), random(-4,4), random(32,40), 0, 0,frandom(0.2,1.5),0,SXF_NOCHECKPOSITION);
			}
		}

		Super.Tick();
	}

	States
	{
	Spawn:
		AID1 AAABCB 5
		{
			if ( Random(1,101) > 50)
			{
				frame = random(0,2);
			}
		}
	Loop;

	Invisible:
		TNT1 A 1;
	Loop;
	}
}




Class WaveScull : CustomInventory
{
	Default
	{
	//+INVENTORY.ALWAYSPICKUP;
	Inventory.PickUpSound "misc/scullpickup";
	Inventory.pickupmessage "You got a mystic Skull";
	Scale 0.1;
	+NOGRAVITY;
	+DONTSPLASH;
	+FORCEXYBILLBOARD;
	+NOCLIP;
	+FLOATBOB;
	-SOLID;
	}

	Override void PostBeginPlay()
	{
		CallACS("ScullHasCome",0,0,0);
		A_PlaySound("misc/scullspawn", CHAN_BODY, 1.0, 0, ATTN_NONE);

		Super.PostBeginPlay();
	}
	States
	{
		Spawn:
			SCLS ABCDEFGH 5 Light("FlickerYel64")
			{

			A_SpawnItemEx("MorFlare", random(-16, 16), random(-16, 16), random(16, 24), 0, 0, frandom(0.5,1),0,SXF_NOCHECKPOSITION, 32, 0);
			A_SpawnItemEx("GiveAMMOsparckle", random(-4, 4), random(-4, 4), random(32, 40), frandom(-0.5,0.5), frandom(-0.5,0.5), frandom(1,2),128,SXF_NOCHECKPOSITION, 0, 0);
			A_SpawnItemEx("HellRingFlare", 0, 0, random(0, 16), 0, 0, frandom(0.5,2),0,SXF_NOCHECKPOSITION, 32, 0);
			}
		Loop;
		Pickup:
			TNT1 A 1 {

				CallACS("strongholdScullArmorBonus",0,0,0);
				if(CallACS("BoneCollector",0,0,0)){

					ThinkerIterator it = ThinkerIterator.Create("AIDSpawner");
					AIDSpawner aid;
					while(aid = AIDSpawner(it.Next())){
						aid.alreadyHealed = false;
						aid.giveHealthCount = 1;
						aid.SetStateLabel("Spawn");
						aid.timerCount = 0;
					}

					ThinkerIterator it2 = ThinkerIterator.Create("DSCammoSpawner");
					DSCammoSpawner am;
					while(am = DSCammoSpawner(it2.Next())){
						am.SetStateLabel("Spawn");
						am.AMMOgived = false;
						am.clockForAmmo = 0;
					}

				}
			}
			Stop;

	}
}

Class DoomSlayerGliph : CustomInventory
{
	Default
	{
	+INVENTORY.ALWAYSPICKUP;
	RenderStyle "Add";
	Inventory.PickUpSound "world/GliphPickup";
	Inventory.pickupmessage "You got a Doom Slayer Gliph";
	Scale 0.25;
	+NOGRAVITY;
	+DONTSPLASH;
	+FORCEXYBILLBOARD;
	+NOCLIP;
	+FLOATBOB;
	-SOLID;
	}

	Override void PostBeginPlay()
	{
		CallACS("GliphHasCome",0,0,0);
		A_PlaySound("misc/WELLDONE", CHAN_BODY, 1.0, 0, ATTN_NONE);
		A_PlaySound("world/GliphLoop", CHAN_AUTO, 1.0, 1, ATTN_NORM);

		Super.PostBeginPlay();
	}
	States
	{
		Spawn:
			DSGL A 1 Light("AIDlight")
			{

			A_SpawnItemEx("MorFlareShade", random(-8, 8), random(-8, 8), random(24, 32), 0, 0, frandom(0.2,0.7),0,SXF_NOCHECKPOSITION, 200, 0);
			A_SpawnItemEx("GiveAMMOsparckle", random(-4, 4), random(-4, 4), random(32, 40), frandom(-0.5,0.5), frandom(-0.5,0.5), frandom(1,2),128,SXF_NOCHECKPOSITION, 128, 0);
			}

		LOOP;
	}
}


Class GiveAMMOsparckle : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.15;
	RenderStyle "Add";
	+NoInteraction;
	+FORCEXYBILLBOARD;
	DistanceCheck "user_MaxDrawDistanceAMMOsparks";

	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3", "S4");
			Loop;
		S1:
			FRS1 A 1;
			GOTO Halt;
		S2:
			FRS2 A 1;
			GOTO Halt;
		S3:
			FRS3 A 1;
			GOTO Halt;
		S4:
			FRS4 A 1;
			GOTO Halt;
		Halt:
			"####" "A" 1 BRIGHT A_FadeOut(0.04);
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}


Class DSCammoSpawner : Actor
{
	DestroyIterator dIt;
	int DestroyerDelay;
	int timerWaitForAgainGiveAmmo;
	int clockForAmmo;
	string AMMOtype;
	int AMMOslot;
	bool AMMOgived;


	Array<string> ammo;
	Array<string> ammoBox;


	Default
	{
		+FORCEXYBILLBOARD;
		+NoGravity;
		+FLOATBOB;
		Renderstyle "Translucent";
		Scale 0.25;
	}
	virtual void InitDestroyer()
	{
		dIt.Init(self);
		dIt.DestroyActors("Ammo", 32);
		A_SpawnItemEx( "ItemSpawnFog", 0, 0, 0, 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
	}
	Override void PostBeginPlay()
	{
		//timerWaitForAgainGiveAmmo= 35*CallACS("GetAmmoRecallTime",0,0,0);
		//a_logInt(CallACS("GetAmmoRecallTime",0,0,0));
		clockForAmmo = 0;
		AMMOgived = false;

		ammo.Push("Clip");
		ammo.Push("Shell");
		ammo.Push("RocketAmmo");
		ammo.Push("Cell");

		ammoBox.Push("ClipBox");
		ammoBox.Push("ShellBox");
		ammoBox.Push("RocketBox");
		ammoBox.Push("CellPack");

		Super.PostBeginPlay();
	}

	Action Void SpawnSparckles(int count = 26)
	{
		for(int i = 0; i < count; i++)
		{

			A_SpawnItemEx("GiveAMMOsparckle", 0, 0, random(32, 40), frandom(-6,6), frandom(-6,6), frandom(-6,6),0,SXF_NOCHECKPOSITION);
		}
	}

	Override void Tick()
	{
		PlayerInfo players = players[consoleplayer];
		int spawnFactor =  Cvar.GetCVar("dsc_spawn_factor", players).GetInt();

			timerWaitForAgainGiveAmmo = 35*CallACS("GetAmmoRecallTime",0,0,0)/spawnFactor;
			//a_logFloat(timerWaitForAgainGiveAmmo);
			if(AMMOgived){
				clockForAmmo = clockForAmmo+1;
				if(clockForAmmo == timerWaitForAgainGiveAmmo){
					AMMOgived = false;
					clockForAmmo = 0;
					SetStateLabel("Spawn");
					CallACS("ammoRespawnedIn",CallACS("GetAmmoRecallTime",0,0,0),0,0);
					A_SpawnItemEx( "ItemSpawnFog", 0, 0, 0, 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
				}
			} else {

				//if(CheckSight(players[0].mo, 0)){
				if(CheckSight(players.mo, 0)){
					A_SpawnItemEx("GiveAMMOsparckle", random(-4, 4), random(-4, 4), random(32, 40), frandom(-0.5,0.5), frandom(-0.5,0.5), frandom(1,2),128,SXF_NOCHECKPOSITION);
				}
			}

			if(DestroyerDelay){ //cleaning previously spawned and not picked up ammo
				DestroyerDelay--;
				if(!DestroyerDelay){InitDestroyer();}
			}


		Super.Tick();
	}
	void GiveAMMO()
	{
		if(!AMMOgived){
			AMMOslot = CallACS("GetAmmoSlot",0,0,0);
			if(random(0,1)>0){
				AMMOtype = ammoBox[AMMOslot];
			} else {
				AMMOtype = ammo[AMMOslot];
			}
			A_SpawnItemEx(AMMOtype, 0, 0, 0, 0, 0, frandom(1,2),0,SXF_NOCHECKPOSITION);
			A_PlaySound("misc/ammospawn2", CHAN_BODY, 1.0, 0, ATTN_NONE);
			SpawnSparckles();
			AMMOgived = true;
			DestroyerDelay = 35*10;
			SetStateLabel("Invisible");
		}
	}

	States
	{
		Spawn:
			AMM1 A 1 BRIGHT { SpawnSparckles();}
			GOTO Halt;
		Halt:
			AMM1 A 1 BRIGHT;
			AMM1 A 1 BRIGHT A_CheckRange( 96, "Halt"); //if(CheckIfCloser(players[0].mo, 96, false)){
			AMM1 A 1 BRIGHT
			{
				GiveAMMO();
			}
			Loop;
		Invisible:
			TNT1 A 1;
			Loop;
	}
}


Class DSCmonsterSpawner: SwitchableDecoration
{
	//args[0] - RespawnChance enforcement
	//args[1] - Dropout strength
	int RandomDelay;
	int MinDelayInSec;
	int MaxDelayInSec;
	int RespawnChance;
	int Repeats;
	int WeaponGotID;
	int RespawnCorrectionFactor;

	Override void PostBeginPlay()
	{
		RespawnChance = !args[0] ? 0 : args[0];
		MinDelayInSec = 1;
		MaxDelayInSec = 10;


		Super.PostBeginPlay();
	}

	virtual	void CalcRespawnRepeats()
	{
		Repeats = 1;

		if ( RespawnChance > 100)
		{
			int RespawnChanceDubl = RespawnChance;

			While(RespawnChanceDubl > 0)
			{
				if( random() % 100 < RespawnChanceDubl)
				{
					Repeats ++;
				}
				RespawnChanceDubl -= 100;
			}
		}
		else
		{
			if( random() % 100 < RespawnChance)
			{
				Repeats ++;
			}
		}



	}

    virtual void FillMonsters() {}
	virtual void SpawnMonsters()
	{
		A_SpawnItemEx("TeleportFog", flags: SXF_NOCHECKPOSITION);

	}

	Override void Activate(Actor activator)
	{
		FillMonsters();
		RandomDelay = Random(MinDelayInSec*35, MaxDelayInSec*35);
		PlayerInfo players = players[consoleplayer];
		RespawnCorrectionFactor = Cvar.GetCVar("dsc_spawn_factor", players).GetFloat()-1;
		RespawnChance = RespawnChance + (CallACS("GetAttempt",0,0,0)?CallACS("GetAttempt",0,0,0):1)*RespawnCorrectionFactor*100;

		CallACS("SetWaveDelay", (RespawnChance/100+1)*MaxDelayInSec*35, 0, 0, 0);
		//CallACS("SetACSspawnFactor", int(Cvar.GetCVar("dsc_spawn_factor", players).GetFloat()*100), 0, 0, 0);

		CalcRespawnRepeats();


		let monCount = DSCMonsterPopulation.Get();
		if(monCount) monCount.monsterCount+=Repeats;

		Super.Activate(activator);
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Inactive:
			TNT1 A -1;
			Stop;
		Active:
			TNT1 A 1 A_SetTics(RandomDelay);
			TNT1 A 0
			{
				SpawnMonsters();
				Repeats --;
				if(Repeats > 0)
				{
					RandomDelay = Random(MinDelayInSec*35, MaxDelayInSec*35);
					return ResolveState("Active");
				}
				return ResolveState(Null);
			}
			Goto Inactive;
	}
}


Class DSCmonsterSpawnerTribune : DSCmonsterSpawner
{
//Args[2] - aditional flags
//Args[2] = 1;  No gunfighters

	Array<string> MonstersTier1;

	override void SpawnMonsters()
	{
			Super.SpawnMonsters();
			A_SpawnItemEx(MonstersTier1[ random(0, MonstersTier1.Size() -1)],
			xvel: random(-args[1],args[1]), yvel: random(-args[1],args[1]), zvel:
			random(5,10),flags: SXF_NOCHECKPOSITION, tid: 131313);
	}

	Override void Activate(Actor activator)
	{
		FillMonsters();
		RandomDelay = Random(MinDelayInSec*35, MaxDelayInSec*35);
		PlayerInfo players = players[consoleplayer];
		RespawnCorrectionFactor = Cvar.GetCVar("dsc_spawn_factor", players).GetInt()-1;
		RespawnChance = RespawnChance + (CallACS("GetAttempt",0,0,0)?CallACS("GetAttempt",0,0,0):1)*RespawnCorrectionFactor*100;
		CalcRespawnRepeats();
		Super.Activate(activator);
		//to uncount watchers
		let monCount = DSCMonsterPopulation.Get();
		if(monCount) monCount.monsterCount-=Repeats;

	}

    Override void FillMonsters()
    {
		MonstersTier1.Clear();
		WeaponGotID = CallACS("GetWeaponGotID",0,0,0);
		//MonstersTier1.Push("ZombieMan");

		MonstersTier1.Push("DSCZombieMan");
		MonstersTier1.Push("DSCZombieMan");
		MonstersTier1.Push("DSCZombieMan");
		MonstersTier1.Push("DSCZombieMan");
		MonstersTier1.Push("DSCdoomImp");
		MonstersTier1.Push("DSCdoomImp");
		if(WeaponGotID>=2)
		{
			MonstersTier1.Push("DSCcacodemon");

		}
		if(WeaponGotID>=3)
		{
			MonstersTier1.Push("DSCHellKnight");

		}

    }
}



Class DSCmonsterSpawner1 : DSCmonsterSpawner
{
//Args[2] - aditional flags
//Args[2] = 1;  No gunfighters

	Array<string> MonstersTier1;
	override void SpawnMonsters()
	{
		Super.SpawnMonsters();
		A_SpawnItemEx(MonstersTier1[ random(0, MonstersTier1.Size() -1)],
		xvel: random(-args[1],args[1]), yvel: random(-args[1],args[1]), zvel:
		random(5,10),flags: SXF_NOCHECKPOSITION, tid: 666666);
	}

    Override void FillMonsters()
    {
		MonstersTier1.Clear();
		WeaponGotID = CallACS("GetWeaponGotID",0,0,0);
		if(Args[2]!=1){
			MonstersTier1.Push("ZombieMan");
		}
		MonstersTier1.Push("DoomImp");

		if(WeaponGotID>=1)
		{
			if(Args[2]!=1){
				MonstersTier1.Push("ShotgunGuy");
			}
			MonstersTier1.Push("Demon");
			MonstersTier1.Push("LostSoul");
		}
    }
}

Class DSCmonsterSpawner2 : DSCmonsterSpawner
{
	Array<string> MonstersTier2;

	override void SpawnMonsters()
	{
		Super.SpawnMonsters();
		A_SpawnItemEx(MonstersTier2[ random(0, MonstersTier2.Size() -1)],
		xvel: random(-args[1],args[1]), yvel: random(-args[1],args[1]), zvel:
		random(5,15),flags: SXF_NOCHECKPOSITION, tid: 666666);
	}

    Override void FillMonsters()
    {
		MonstersTier2.Clear();
		WeaponGotID = CallACS("GetWeaponGotID",0,0,0);

		if(WeaponGotID<2)
		{
			MonstersTier2.Push("Demon");
			MonstersTier2.Push("DoomImp");
			MonstersTier2.Push("ShotgunGuy");
		}
		if(WeaponGotID>=2)
		{
			MonstersTier2.Push("Spectre");
			MonstersTier2.Push("Fatso");
			MonstersTier2.Push("Cacodemon");
		}
		if(WeaponGotID>=3)
		{
			MonstersTier2.Push("HellKnight");
			if(Args[2]!=1){
				MonstersTier2.Push("ChaingunGuy");
			}

		}
		if(WeaponGotID>=4)
		{
			MonstersTier2.Push("Arachnotron");
			MonstersTier2.Push("Revenant");
		}
    }
}

Class DSCmonsterSpawner3 : DSCmonsterSpawner
{
	Array<string> MonstersTier3;
	override void SpawnMonsters()
	{
		Super.SpawnMonsters();
		A_SpawnItemEx(MonstersTier3[ random(0, MonstersTier3.Size() -1)],
		xvel: random(-args[1],args[1]), yvel: random(-args[1],args[1]), zvel:
		random(5,15),flags: SXF_NOCHECKPOSITION, tid: 666666);
	}


    Override void FillMonsters()
    {
		MonstersTier3.Clear();
		WeaponGotID = CallACS("GetWeaponGotID",0,0,0);
		if(WeaponGotID>=4)
		{
			MonstersTier3.Push("BaronOfHell");
			MonstersTier3.Push("Archvile");
			MonstersTier3.Push("PainElemental");
		} else {
			if(WeaponGotID<2){
				MonstersTier3.Push("Cacodemon");
			}
			if(WeaponGotID>=2)
			{
				MonstersTier3.Push("Spectre");
				MonstersTier3.Push("Fatso");
				MonstersTier3.Push("Cacodemon");
			}
			if(WeaponGotID>=3)
			{
				MonstersTier3.Push("HellKnight");
				MonstersTier3.Push("Fatso");
				MonstersTier3.Push("Cacodemon");
				if(Args[2]!=1){
					MonstersTier3.Push("ChaingunGuy");
				}

			}
		}
    }
}

Class DSCmonsterSpawner4 : DSCmonsterSpawner
{
	Array<string> MonstersTier4;
	override void CalcRespawnRepeats()
	{
		Repeats = 1;
	}

	override void SpawnMonsters()
	{
		Super.SpawnMonsters();
		A_SpawnItemEx(MonstersTier4[ random(0, MonstersTier4.Size() -1)],
		xvel: random(-args[1],args[1]), yvel: random(-args[1],args[1]), zvel:
		random(5,15),flags: SXF_NOCHECKPOSITION, tid: 666666);
	}

    Override void FillMonsters()
    {
		WeaponGotID = CallACS("GetWeaponGotID",0,0,0);
		if(WeaponGotID>=5)
		{
			MonstersTier4.Push("SpiderMastermind");
		}	else {
			MonstersTier4.Push("BaronOfHell");
		}
    }
}
Class DSCmonsterSpawner5 : DSCmonsterSpawner
{
	Array<string> MonstersTier5;

	override void CalcRespawnRepeats()
	{
		Repeats = 1;
	}


	override void SpawnMonsters()
	{
		Super.SpawnMonsters();
		A_SpawnItemEx(MonstersTier5[ random(0, MonstersTier5.Size() -1)],
		xvel: random(-args[1],args[1]), yvel: random(-args[1],args[1]), zvel:
		random(5,15),flags: SXF_NOCHECKPOSITION, tid: 666666);
	}

    Override void FillMonsters()
    {
		WeaponGotID = CallACS("GetWeaponGotID",0,0,0);
		if(WeaponGotID>=5)
		{
			MonstersTier5.Push("Cyberdemon");
		} else {
			MonstersTier5.Push("BaronOfHell");
		}
    }
}


Class GiveWeaponSparckle : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.15;
	RenderStyle "Add";
	+NoInteraction;
	+FORCEYBILLBOARD;
	YScale  2;

	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3", "S4");
			Loop;
		S1:
			FRS1 A 1;
			GOTO Halt;
		S2:
			FRS2 A 1;
			GOTO Halt;
		S3:
			FRS3 A 1;
			GOTO Halt;
		S4:
			FRS4 A 1;
			GOTO Halt;
		Halt:
			"####" "A" 1 BRIGHT A_FadeOut(0.02);
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}

Class WeaponMarker : CustomInventory
{
	int timer;

	Default
	{
	Radius 48;
	+INVENTORY.ALWAYSPICKUP;
	+NOGRAVITY;
	+DONTSPLASH;
	+NOCLIP;
	-SOLID;
	Inventory.PickupMessage  "";
	Inventory.PickupSound  "null";
	}

	Override void PostBeginPlay()
	{
		timer = 0;
	}


	/*Override void Tick()
	{
		if(timer<35*60){timer++;}
		else { SetStateLabel("Death"); }
		Super.Tick();
	}*/

	States
	{
		Spawn:
			TNT1 A 2 Light("FlickerYel64")
			{
				A_SpawnItemEx("GiveWeaponSparckle", random(-2, 2), random(-2, 2), random(32, 40), 0, 0, frandom(1,2),200,SXF_NOCHECKPOSITION);
			}

		LOOP;

		/*Death:
			TNT1 A 1 A_Fadeout(1.0);
			Stop;*/
	}

}

Class DSCweaponSpawner   : SwitchableDecoration
{
	Array<string> Weapons;
	int droppedWeapon;
	Double spawnedWeaponsCount;
	DestroyIterator dIt;


	Override void PostBeginPlay()
	{
		Weapons.Push("no_name");
		Weapons.Push("Shotgun");
		Weapons.Push("SuperShotgun");
		Weapons.Push("Chaingun");
		Weapons.Push("RocketLauncher");
		Weapons.Push("PlasmaRifle");
		Weapons.Push("BFG9000");

			//PlayerInfo player = players[consoleplayer];
			//a_log(player.mo.GetClassName());

		Super.PostBeginPlay();
	}
	virtual void InitDestroyer()
	{
		dIt.Init(self);
		dIt.DestroyActors("Weapon", 32);
	}

	States
	{
		Spawn:
			TNT1 A 1;
			GOTO Inactive;
		Inactive:
			TNT1 A -1;
			Loop;
		Active:
			TNT1 A 1;
			TNT1 A 1 a_jump(200, "Active");//random delay
			TNT1 A 1 InitDestroyer();
			TNT1 A 10;
			TNT1 A 0 {
				droppedWeapon = CallACS("GetWeaponGotIDforWeaponSpawner",0,0,0);
				A_SpawnItemEx( "WeaponMarker", 0, 0, 0, 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
				A_SpawnItemEx( "ItemSpawnFog", 0, 0, 0, 0, 0, 0,0,SXF_NOCHECKPOSITION, 0, 0);
				//A_SpawnItemEx( Weapons[droppedWeapon], 0, 0, 0, 0, 0, 0,0,SXF_NOCHECKPOSITION | SXF_SETMASTER, 0, 666667);

				Actor AspawnedWeapon = Spawn( Weapons[droppedWeapon], self.pos, ALLOW_REPLACE );


			}
			Goto Inactive;
	}
}

Class ItemSpawnFogFlare : Actor
{
	Default
	{
		Alpha 1.0;
		Scale 0.15;
		RenderStyle "Add";
		+NoInteraction;
		+FORCEXYBILLBOARD;
	}
	States
	{
		Spawn:
			ISFL A 1 BRIGHT A_FadeOut(0.04);
	}
}

Class ItemSpawnFog : Actor
{
	Default
	{
		Alpha 1.0;
		+NoInteraction;
	}

	States
	{
		Spawn:
			TNT1 A 1
			{
				A_Playsound("misc/itemspawn", 1, 1, 0);
				A_SpawnItemEx("ItemSpawnFogFlare", 0, 0, random(0, 8), 0, 0, frandom(1,5),0,SXF_NOCHECKPOSITION);
				A_fadeOut(0.1);
			}
			Loop;
	}
}

Class HellRingFlare : Actor
{
	int RollSpeed;
	Default
	{
		Alpha 1.0;
		Scale 0.15;
		RenderStyle "Add";
		+NoInteraction;
		+ROLLSPRITE;
		+FLATSPRITE;
	}
	Override void PostBeginPlay()
	{
		RollSpeed = Random(-20, 20);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
	void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		A_fadeOut(0.03);
	}
	States
	{
		Spawn:
			HRNS A 1 BRIGHT ParticleLife();
			LOOP;
	}
}


Class MorFlareShade : Actor
{
	int RollSpeed;
	Default
	{
		Alpha 0.2;
		Scale 0.3;
		RenderStyle "Subtract";
		+NoInteraction;
		+ROLLSPRITE;
		+FORCEXYBILLBOARD;
	}
	Override void PostBeginPlay()
	{
		RollSpeed = Random(-10, 10);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
	void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		A_fadeOut(0.002);
	}
	States
	{
		Spawn:
			MOR1 A 1 ParticleLife();
			LOOP;
	}
}
Class MorFlare : Actor
{
	int RollSpeed;
	Default
	{
		Alpha 0.2;
		Scale 0.3;
		RenderStyle "Add";
		+NoInteraction;
		+ROLLSPRITE;
		+FORCEXYBILLBOARD;
	}
	Override void PostBeginPlay()
	{
		RollSpeed = Random(-10, 10);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
	void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		A_fadeOut(0.002);
	}
	States
	{
		Spawn:
			MOR1 A 1 ParticleLife();
			LOOP;
	}
}

Class DSCdoomImp : DoomImp
{
	bool lookForTarget;

	override void PostBeginPlay()
	{
		lookForTarget = false;
		Super.PostBeginPlay();
	}

	States
	{
	 Spawn:
		TROO AB 10
		{
			if(!lookForTarget)
			{
				A_Wander();
			}
			else
			{
				A_Look();
			}

		}
		Loop;
		BecomeMonster:
			TNT1 A 0
			{
				if(health<=0){
					return ResolveState("Death");
				}
				lookForTarget = true;
				return ResolveState(null);
			}
		Goto See;
	}
}


Class DSCZombieMan : ZombieMan
{
	bool lookForTarget;

	override void PostBeginPlay()
	{
		lookForTarget = false;
		Super.PostBeginPlay();
	}

	States
	{
	  Spawn:
		POSS AB 10
		{
			if(!lookForTarget)
			{
				A_Wander();
			}
			else
			{
				A_Look();
			}

		}
		Loop;
		BecomeMonster:
			TNT1 A 0
			{
				if(health<=0){
					return ResolveState("Death");
				}
				lookForTarget = true;
				return ResolveState(null);
			}
		Goto See;
	}
}
Class DSCcacodemon : Cacodemon
{
	bool lookForTarget;

	override void PostBeginPlay()
	{
		lookForTarget = false;
	}
	States
	{
	  Spawn:
		HEAD A 10
		{
			if(!lookForTarget)
			{
				A_Wander();
			}
			else
			{
				A_Look();
			}

		}
		Loop;
		BecomeMonster:
			TNT1 A 0
			{
				if(health<=0){
					return ResolveState("Death");
				}
				lookForTarget = true;
				return ResolveState(null);
			}
		Goto See;
	}
}
Class DSCHellKnight : HellKnight
{
	bool lookForTarget;

	override void PostBeginPlay()
	{
		lookForTarget = false;
	}
	States
	{
	 Spawn:
		BOS2 AB 10
		{
			if(!lookForTarget)
			{
				A_Wander();
			}
			else
			{
				A_Look();
			}

		}
		Loop;
		BecomeMonster:
			TNT1 A 0
			{
				if(health<=0){
					return ResolveState("Death");
				}
				lookForTarget = true;
				return ResolveState(null);
			}
		Goto See;
	}
}
/*
Class DSCportalToMap : CustomInventory
{

	Default
	{
	Radius 32;
	+INVENTORY.ALWAYSPICKUP;
	Inventory.PickUpSound "misc/scullpickup";
	+NOGRAVITY;
	-SOLID;
	}

	Action void A_SpawnItemIn()
	{
		int Time = 30;
		int Xoffset = random(-64, 64);
		int Yoffset = random(-64, 64);
		int Zoffset = random(64, 128);
		double Xvel = -Xoffset/Time;
		double Yvel = -Yoffset/Time;
		double Zvel = -Zoffset/Time;
		A_SpawnItemEx("DSCportalParticle", Xoffset, Yoffset, Zoffset, Xvel, Yvel, Zvel,0,SXF_NOCHECKPOSITION);
	}
	States
	{
	 Spawn:
		TNT1 A 1 A_SpawnItemIn(); //A_SpawnItemEx("DSCportalParticle", random(-8, 8), random(-8, 8), random(0, 8), Frandom(-2, 2), Frandom(-2, 2), Frandom(2, 8),0,SXF_NOCHECKPOSITION);
		Loop;
	}


}
*/
Class DSCportalToMap : CustomInventory
{

	Default
	{
	Radius 32;
	+INVENTORY.ALWAYSPICKUP;
	Inventory.PickUpSound "misc/scullpickup";
	Inventory.pickupmessage "Teleportation";
	+NOGRAVITY;
	-SOLID;
	}

	States
	{
	 Spawn:
		TNT1 A 3 Light("FlickerYel64")
			{

			A_SpawnItemEx("MorFlare", random(-16, 16), random(-16, 16), random(0, 16), 0, 0, frandom(0.5,1),0,SXF_NOCHECKPOSITION, 32, 0);
			A_SpawnItemEx("GiveAMMOsparckle", random(-4, 4), random(-4, 4), random(32, 40), frandom(-0.5,0.5), frandom(-0.5,0.5), frandom(1,2),128,SXF_NOCHECKPOSITION, 0, 0);
			A_SpawnItemEx("HellRingFlare", 0, 0, random(0, 16), 0, 0, frandom(0.5,2),0,SXF_NOCHECKPOSITION, 32, 0);
			A_SpawnItemEx("GiveWeaponSparckle", random(-8, 8), random(-8, 8), random(0, 16), 0, 0, frandom(2,4),200,SXF_NOCHECKPOSITION);
			}
		Loop;
	}


}


Class DSCportal : Actor
{
	int Time;
	int Xoffset;
	int Yoffset;
	int Zoffset;
	double Xvel;
	double Yvel;
	double Zvel;

	Default
	{

		+NoInteraction;
	}
	Override void PostBeginPlay()
	{
		Time = 30;
		Super.PostBeginPlay();
	}
	void A_SpawnItemIn()
	{
		Xoffset = random(-64, 64);
		Yoffset = random(-64, 64);
		Zoffset = random(64, 128);
		Xvel = -Xoffset/Time;
		Yvel = -Yoffset/Time;
		Zvel = -Zoffset/Time;
		A_SpawnItemEx("DSCportalParticle", Xoffset, Yoffset, Zoffset, Xvel, Yvel, Zvel,0,SXF_NOCHECKPOSITION);
	}
	States
	{
	 Spawn:
		TNT1 A 1 A_SpawnItemIn();
		Loop;
	}
}
Class DSCportalParticle : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.15;
	RenderStyle "Add";
	+NoInteraction;
	+FORCEXYBILLBOARD;

	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3", "S4");
			Loop;
		S1:
			FRS1 A 1;
			GOTO Halt;
		S2:
			FRS2 A 1;
			GOTO Halt;
		S3:
			FRS3 A 1;
			GOTO Halt;
		S4:
			FRS4 A 1;
			GOTO Halt;
		Halt:
			"####" "A" 1 BRIGHT
			{
				A_SpawnItemEx("DSCportalParticleTracer", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION);
				A_FadeOut(0.03);
			}
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}

Class DSCportalParticleTracer : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.15;
	RenderStyle "Add";
	+NoInteraction;
	+FORCEXYBILLBOARD;

	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3", "S4");
			Loop;
		S1:
			FRS1 A 1;
			GOTO Halt;
		S2:
			FRS2 A 1;
			GOTO Halt;
		S3:
			FRS3 A 1;
			GOTO Halt;
		S4:
			FRS4 A 1;
			GOTO Halt;
		Halt:
			"####" "A" 1 BRIGHT
			{
				A_FadeOut(0.08);
			}
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}

Class DSCMegaZombieMan : ZombieMan
{
	Default
	{
		-ISMONSTER;
		+MISSILEEVENMORE;
		Health 999999;
	}
	States
	{
	  Spawn:
		POSS AABBCCDD 4 A_Wander;
		Loop;
	 Missile:
	   POSS E 10 A_FaceTarget;
	   POSS E 0 A_PlaySound ("grunt/attack");
	   POSS F 8 A_CustomBulletAttack (0, 0, 1, 999999, "BulletPuff", 0, CBAF_NORANDOM);
	   POSS E 8;
	   goto See	;
	  Death:
		POSS H 5;
		POSS I 5 A_Scream;
		POSS J 5;
		POSS K 5;
		POSS L -1;
		Stop;
	  XDeath:
		POSS H 1;
		Goto Death;
	}
}

Class HSChelper : SwitchableDecoration
{
	Default
	{
	Scale 0.1;
	+NOGRAVITY;
	+DONTSPLASH;
	+NOCLIP;
	+FLOATBOB;
	-SOLID;
	}

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
	}
	Action Void SpawnBurstSparkles(int count = 15)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DSCExplosionSpark", Random(-16, 16), Random(-16, 16), Random(-16, 16), Random(-8, 8), Random(-8, 8), Random(0, 16), 0, SXF_NOCHECKPOSITION, 0, 0);
		}
	}
	void A_HSChelper()
	{
		if(CheckIfCloser(players[0].mo, 64, false)){
			Acs_NamedExecuteAlways("DrawHelp",0, Args[0], Args[1], Args[2]);
			A_PlaySound("HelpAct", 64, 1.0, false, ATTN_NONE);
			SetStateLabel("Inactive");
		}
			A_SpawnItemEx("MorFlareRed", random(-16, 16), random(-16, 16), random(32, 40), 0, 0, frandom(0.5,1),0,SXF_NOCHECKPOSITION, 32, 0);
			A_SpawnItemEx("FireFlame", random(-4, 4), random(-4, 4), random(40, 64), frandom(-0.5,0.5), frandom(-0.5,0.5), frandom(1,2),128,SXF_NOCHECKPOSITION, 0, 0);
			A_SpawnItemEx("FireFlame", random(-4, 4), random(-4, 4), random(40, 64), frandom(-0.5,0.5), frandom(-0.5,0.5), frandom(1,2),128,SXF_NOCHECKPOSITION, 0, 0);
	}

	States
	{
		Spawn:
			TNT1 A 1;
			GOTO Inactive;
		Inactive:
			TNT1 A 1;
			LOOP;
		Active:
			DSCH A 1 BRIGHT
			{
			A_PlaySound("HelpSpawn", 64, 1.0, false, ATTN_NONE);
			SpawnBurstSparkles(64);
			}
			GOTO ActiveState;
		ActiveState:
			DSCH A 1 BRIGHT A_HSChelper();
			LOOP;
	}
}
Class MorFlareRed : Actor
{
	int RollSpeed;
	Default
	{
		Alpha 0.1;
		Scale 0.3;
		RenderStyle "Add";
		+NoInteraction;
		+ROLLSPRITE;
		+FORCEXYBILLBOARD;
	}
	Override void PostBeginPlay()
	{
		RollSpeed = Random(-10, 10);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
	void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		A_fadeOut(0.002);
	}
	States
	{
		Spawn:
			MOR2 A 1 ParticleLife();
			LOOP;
	}
}


Class DSCprisonedSaintBIG : DSCprisonedSaint
{
	Default
	{
		Scale 2.0;
	}
}

Class DSCprisonedSaint : Actor
{
	int RollSpeed;
	int ThisState; //0 - walk, 1 - run, 2 - rest
	int RunLen;
	int Runcounter;
	int RestCounter;
	int HealDivisor;
	int HealDivisorCounter;
	int RaiseMahHeigth;
	bool ChaseStarted;
	int SaintHealthUp;
	int LiveMonstersNum;
	int SpeedCombatMultipler;
	int HealthCombatMultipler;
	int DamageCombatMultipler;
	int StunCounter;
	int ChaseCounter;
	int NopainCounter;
	int NopainCounterMAX;
	int NopainSpeed;
	bool scullSpawned;
	int RaiseDebugDelay;
	vector3 SaintPos;

	Default
	{
		Health 300;
		Radius 24;
		Height 24;
		Mass 300;
		Speed 15;
		PainChance 96;
		MaxStepHeight 128;
		MONSTER;

		-IsMonster;
		+FLOAT
		+NOGRAVITY
		+DONTTHRUST;
		Scale 0.5;
		RenderStyle "Add";
		+ROLLSPRITE;
		+FORCEXYBILLBOARD;
		+MISSILEEVENMORE;
		+FRIENDLY;
		PainSound "PureSoulPain";

	}
	Override void PostBeginPlay()
	{
		RollSpeed = 5;
		RunCounter = 0;
		RestCounter = 0;
		HealDivisor = 8;
		SpeedCombatMultipler = 2;
		HealthCombatMultipler = 2;
		DamageCombatMultipler = 2;
		NopainCounterMAX = 35*5;
		NopainSpeed = 150;
		RaiseMahHeigth = 384;
		RaiseDebugDelay = 35*60;
	}
	Override void Tick()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		//for stuntout
		if(StunCounter>0){
			if(ChaseCounter>35){
				StunCounter = 0;
				ChaseCounter = 0;
			}
			ChaseCounter++;
		}
		if(NopainCounter>0){
			PainChance = 0;
			Speed = NopainSpeed;
			A_Log("Prisoned Saint: Help! Help! Help!");
			NopainCounter++;
			if(NopainCounter>NopainCounterMAX){
				NopainCounter = 0;
				Speed = Default.Speed;
			}
		} else {
			PainChance = default.PainChance;
		}

		Super.Tick();
	}
	void SaintLook()
	{
		A_LookEx();
		A_SpawnItemEx("MorFlare", Random(-8,8), Random(-8,8), Random(-8,8), 0, 0, 0, 0, 128, 0);
	}
	Action Void SpawnBurstAidi(int count = 30)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("AIDI", 0, 0, 0, frandom(-6,6), frandom(-6,6), frandom(-6,6),0,SXF_NOCHECKPOSITION);
		}
	}
	void SaintRaise(){
	//256 -96
		SaintPos.x = 256;
		SaintPos.y = -96;
		PainChance = 0;
		Mass = 999999999;
		SaintHealing();
		bDontThrust = true;
		RaiseDebugDelay--;

		if(pos.z - floorz < RaiseMahHeigth && RaiseDebugDelay>0) {
			//SetZ(pos.z+0.2);
			SaintPos.z = pos.z+0.2;
			SetOrigin(SaintPos, true);
			if(random(1, 70)==70){
				A_PlaySound("puresoul/attack", CHAN_WEAPON, 1.0, false, ATTN_NONE);
				A_SpawnItemEx("DSCcombatSeraphimGliphBig", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION, 0, 0);
				A_Explode(damage:random(4, 8), distance:384, flags:XF_NOTMISSILE);
				A_Blast(strength:256, radius:128);
			}
		} else {
			if(!scullSpawned){
				Acs_NamedExecuteAlways("SpawnSaintRaisedScull",0, args[0]);
				A_PlaySound("world/SaintSaved", CHAN_WEAPON, 1.0, false, ATTN_NONE);

				scullSpawned = true;

			} else {
				A_FadeOut(0.1);
			}
		}

	}
	void SaintHealing(){
		//((health/default.health)*100 < 100){
		if(health < default.health){
			SaintHealthUp = CallACS("SaintHealthUp",0,0,0);
			if(SaintHealthUp>0){
				health = health+SaintHealthUp+HealthCombatMultipler*LiveMonstersNum;
				if(health>default.health){health = default.health;}
				A_Log("Prisoned Saint: Thank You for help!");
				SpawnBurstAidi();
			}
			/////////////
			if(HealDivisorCounter == HealDivisor){
				if(LiveMonstersNum>0){
					//A_Log("Prisoned Saint: regenerate M1");
					health = health+1;
				} else {
					health = health+20;
					A_Log("Prisoned Saint fast regenerate");
				}
				if(health>default.health){health = default.health;}
				//A_Log("Prisoned Saint: Regenerate.");
				HealDivisorCounter = 0;
			}
			HealDivisorCounter ++;
		}
	}


	void SaintChase()
	{
		SaintHealing();
		if(pos.z - floorz <32.0) SetZ(floorz+32.0);
		if(pos.z - floorz >96.0) SetZ(floorz+96.0);
		A_Chase("GliphSmall", "Missle");
		A_PlaySound("puresoul/active", 7, 1.0, true);
		if(!ChaseStarted){
			A_PlaySound("puresoul/sight");
			ChaseStarted = true;
		}
		A_SpawnItemEx("MorFlare", Random(-8,8), Random(-8,8), Random(-8,8), 0, 0, 0, 0, 128, 0);
		LiveMonstersNum = CallACS("GetLiveMonstersCount",0,0,0);
		Speed = Default.Speed+LiveMonstersNum*SpeedCombatMultipler;

	}
	States
	{
		Spawn:
			MFLY A 4 SaintLook();
			LOOP;
		See:
			MFLY A 4 SaintChase();
			LOOP;
		GliphSmall:
			TNT1 A 0 A_PlaySound("puresoul/prepare", CHAN_WEAPON, 1.0, false, ATTN_NONE );
			MFLY C 15;
			TNT1 A 0  A_PlaySound("puresoul/attack", CHAN_WEAPON, 1.0, false, ATTN_NONE);
			TNT1 A 0 A_SpawnItemEx("DSCcombatSeraphimGliph", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION, 0, 0);
			TNT1 A 0  A_Explode(damage:random(8, 16+DamageCombatMultipler*LiveMonstersNum), distance:128, flags:XF_NOTMISSILE);
			TNT1 A 0 A_Blast(strength:128, radius:64);
			MFLY C 10;
			GOTO See;
		GliphBig:
			//MFLY B 5;
			TNT1 A 0  A_PlaySound("puresoul/attack", CHAN_WEAPON, 1.0, false, ATTN_NONE);
			TNT1 A 0 A_SpawnItemEx("DSCcombatSeraphimGliphBig", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION, 0, 0);
			TNT1 A 0  A_Explode(damage:random(32, 64+DamageCombatMultipler*LiveMonstersNum), distance:256, flags:XF_NOTMISSILE);
			TNT1 A 0 A_Blast(strength:256, radius:512);
			TNT1 A 0 {
				//Teleport( (target.pos.x + 30, target.pos.y, target.pos.z),target.angle);
			}
			MFLY C 35;
			GOTO See;
		Missle:
			MFLY C 5 A_FaceTarget;
			MFLY C 5 A_CustomComboAttack("SeraphimSparkBall", 0, random(1, 10), "imp/melee");
			GOTO See;
		Pain:
			MFLY B 5
			{
				A_Pain();
				StunCounter++;
				if(StunCounter > 3){
					NopainCounter = 1;
					SetStateLabel("GliphBig");
				}
			}
			TNT1 A 0 A_Jump(128, "GliphSmall", "Missle", "Pain");
			GOTO See;
		Raise:
			MFLY A 1 SaintRaise();
			Loop;
		Death:
			TNT1 A -1 Acs_NamedExecuteAlways("SaintDead",0);
			Stop;
	}
}


Class DSCSeraphimRaiserLight : SwitchableDecoration
{
	Default
	{
		Scale 2.0;
		RenderStyle "Add";
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
		+FLATSPRITE;
		RenderRadius 2048;
		Alpha 0.0;
		+ROLLSPRITE;
	}
	States
	{
		Spawn:
			TNT1 A 1;
		Goto Halt;
		Inactive:
			HAL1 A 1 BRIGHT {
				A_StopSound(6);
				A_FadeOut(0.01, false);
				A_SetRoll(roll+1,SPF_INTERPOLATE);
			}
			Loop;
		Active:
			HAL1 A 1 BRIGHT Light("PureSoulChase") {
				A_FadeTo(1.0, 0.01);
				A_SetRoll(roll+1,SPF_INTERPOLATE);
				A_PlaySound("puresoul/raising", 6, 1.0, true, ATTN_NONE);
				//
				A_SpawnItemEx("DSCSeraphimRaiserLightSmoke", random(-128, 128), random(-128, 128), random(-32, 32), 0, 0, random(-6, -10), 0,SXF_NOCHECKPOSITION, 0, 0);
				}
			Loop;
		Halt:
			TNT1 A 1 A_StopSound(6);
			Loop;
	}
}
Class DSCSeraphimRaiserLightSmoke : Actor
{
	int RollSpeed;
	Default
	{
		Alpha 0.1;
		Scale 2.0;
		RenderStyle "Add";
		+NoInteraction;
		+ROLLSPRITE;
		+FORCEXYBILLBOARD;
	}
	Override void PostBeginPlay()
	{
		RollSpeed = Random(-10, 10);
		A_SetRoll(random(0, 360));
		Super.PostBeginPlay();
	}
	void ParticleLife()
	{
		A_SetRoll(roll+RollSpeed,SPF_INTERPOLATE);
		roll%=360;
		A_fadeOut(0.002);
	}
	States
	{
		Spawn:
			MOR1 A 1 ParticleLife();
			LOOP;
	}
}
Class DSCcombatSeraphimGliph : Actor
{
	int Rotation;
	Default
	{
		Scale 0.1;
		+ROLLSPRITE;
		RenderStyle "Add";
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
	}
	Override void PostBeginPlay()
	{
		if(random(0, 1)){
			Rotation = 10;
		} else {Rotation = -10;}
		A_QuakeEx(4,4,0,20,0,512,"",QF_SCALEDOWN);
	}
	Action Void SpawnBurstSparks(int count = 10)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("SeraphimSparkBallTracer", random(8, 8), random(8, 8), random(8, 8), frandom(-12,12), frandom(-12,12), frandom(-12,12),0,SXF_NOCHECKPOSITION);
		}
	}
	States
	{
		Spawn:
			SGLP A 1 light("PureSoulGliph")
			{
				A_SetRoll(roll+Rotation,SPF_INTERPOLATE);
				scale.Y+=0.04;
				scale.X+=0.04;
				SpawnBurstSparks();
				A_fadeOut(0.1);
			}
		Loop;
	}
}
Class DSCcombatSeraphimGliphBig : Actor
{
	int Rotation;
	Default
	{
		Scale 0.1;
		+ROLLSPRITE;
		RenderStyle "Add";
		+NOINTERACTION;
		+FLATSPRITE;
	}
	Override void PostBeginPlay()
	{
		if(random(0, 1)){
			Rotation = 15;
		} else {Rotation = -15;}
		A_QuakeEx(8,8,0,20,0,512,"",QF_SCALEDOWN);
	}
	Action Void SpawnBurstSparks(int count = 10)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("SeraphimSparkBallTracer", random(-8*scale.Y*10, 8*scale.Y*10), random(-8*scale.Y*10, 8*scale.Y*10), random(-8*scale.Y*10, 8*scale.Y*10), frandom(-12,12), frandom(-12,12), frandom(-12,12),0,SXF_NOCHECKPOSITION);
		}
	}
	States
	{
		Spawn:
			SGLP A 1 light("PureSoulGliph")
			{
				A_SetRoll(roll+Rotation,SPF_INTERPOLATE);
				scale.Y+=0.04;
				scale.X+=0.04;
				SpawnBurstSparks(10);
				A_fadeOut(0.015);
			}
		Loop;
	}
}
Class SeraphimSparkBall : Actor
{
	Default
	{
		Radius 4;
		Height 4;
		Speed 10;
		FastSpeed 20;
		Damage 3;
		Projectile;
		+RANDOMIZE;
		+FORCEXYBILLBOARD;
		RenderStyle "Add";
		Alpha 1;
		Scale 0.15;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	Action Void SpawnBurstSparks(int count = 20)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("SeraphimSparkBallTracer", random(4, 4), random(4, 4), random(4, 4), frandom(-8,8), frandom(-8,8), frandom(-8,8),0,SXF_NOCHECKPOSITION);
		}
	}
	States
	{
		Spawn:
			SPBL A 1 Bright A_SpawnItemEx("SeraphimSparkBallTracer", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION);
			Loop;
		Death:
			BAL1 CDE 6 Bright SpawnBurstSparks();
			Stop;
	}
}
Class SeraphimSparkBallTracer : Actor
{
	Default
	{
	Alpha 1.0;
	Scale 0.15;
	RenderStyle "Add";
	+NoInteraction;
	+FORCEXYBILLBOARD;

	}
	States
	{
		Spawn:
			TNT1 A 1 A_Jump(256, "S1", "S2", "S3");
			Loop;
		S1:
			SRS2 A 1;
			GOTO Halt;
		S2:
			SRS3 A 1;
			GOTO Halt;
		S3:
			SRS4 A 1;
			GOTO Halt;
		Halt:
			"####" "A" 1 BRIGHT
			{
				A_FadeOut(0.05);
			}
			LOOP;
		Death:
			TNT1 A 1;
			stop;
	}
}
Class DSCeyeBounder : Actor
{
	bool IsDead;
	Default
	{
		Health 200;
		Radius 48;
		Height 48;
		DeathHeight 8;
		Mass 3000;
		PainChance 128;
		+NOGRAVITY
		+SOLID;
		+SHOOTABLE;
		-PUSHABLE;
		YScale 0.2;
		XScale 0.2;
		+FLOATBOB;
		FloatBobStrength 0.5;
		PainSound "EYEPAIN";
	}
	void SpawnBlood(int count = 5)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DSCbloodTrail", 0, 0, random(32, 40), frandom(-6,6), frandom(-6,6), frandom(0.5,3),0,SXF_NOCHECKPOSITION);
		}
	}
	void SpawnDeathBlood(int count = 5)
	{
		for(int i = 0; i < count; i++)
		{
			A_SpawnItemEx("DSCbloodTrail", 0, 0, random(32, 40), frandom(-12,12), frandom(-12,12), frandom(0.5,12),0,SXF_NOCHECKPOSITION);
		}
	}
	Override void Tick()
	{
		if(!IsDead){
			A_SpawnItemEx("BloodDropBig", random(-16, 16), random(-16, 16), random(-48, -32), 0, 0, -4,0,SXF_NOCHECKPOSITION, 64);
			if(pos.z - floorz <32.0) SetZ(floorz+32.0);
			if(pos.z - floorz >128.0) SetZ(floorz+128.0);
		} else {
			if(scale.Y>0.1){
			scale.Y-=0.001;
			}
		}
		Super.Tick();
	}
	States
	{
		Spawn:
			HEYE AAABCB 10
		{
			A_PlaySound("eyebound/active", 7, 1.0, true);
			if ( Random(1,101) > 50)
			{
				frame = random(0,2);
			}
		}
			LOOP;
		Pain:
			HEYE DDDE 5
			{
				A_PlaySound("EYEPAIN");
				SpawnBlood();
			}
			GOTO Spawn;
		Death:
			TNT1 A 0 {
				A_PlaySound("eyebound/death", 7, 1.0, false, ATTN_NONE);
				bFLOATBOB = false;
				IsDead = true;
			}
			HEYE DE 10 SpawnDeathBlood(15);
			HEYE F 10 SpawnDeathBlood(15);
			HEYE G 10 SpawnDeathBlood(15);
			HEYE H 10 SpawnDeathBlood(15);
			HEYE K 10 SpawnDeathBlood(15);
			HEYE L 10 SpawnDeathBlood(15);
			HEYE L -1;
			Stop;
	}
}

class DSCbloodTrail : Actor
{
	Default
	{
		Scale 0.2;
		+ROLLSPRITE;
		+FORCEXYBILLBOARD;
	}
	States
	{
		Spawn:
			TNT1 A 0 NODELAY A_PlaySound("BloodSpawn");
			B1LD A 1 A_Jump (256, 1, 2, 3);
			B1LD A 1 A_Jump (256, "Fly");
			B1LD B 1 A_Jump (256, "Fly");
			B1LD C 1 A_Jump (256, "Fly");
			LOOP;
		Fly:
			"####" "#" 1
			{
				A_SetRoll(roll+5,SPF_INTERPOLATE);
				A_FadeOut(0.05);
			}
			LOOP;

	}
}

Class BloodDropBig : Actor
{

	Default
	{
		+Missile;
		+NoBlockMap;
		+NoGravity;
		Height 2;
		Radius 2;
		Renderstyle "Translucent";
		Alpha 1.0;
		Xscale 0.1;
		Yscale 0.1;
	}
  States
  {
  Spawn:
   RND1 A 1 A_JumpIf(WaterLevel > 0, "Death");
    Loop;
  Death:
	RND1 B 5 A_SetScale(0.5);
    RND1 CDEFGH 5 A_FadeOut(0.05);
    Stop;
  }
}

Class DSCtentyacleBounder : Actor
{
	Default
	{
		+SOLID;
		+SHOOTABLE;
		-PUSHABLE;
		+DONTTHRUST;
		+NOGRAVITY;
		PainChance 128;
		Height 256;
		DeathHeight 0;
		Health 999999999;
		DamageFactor 0.0;
		Radius 16;
		Renderstyle "Translucent";
		+FORCEYBILLBOARD;
		Alpha 1.0;
		Xscale 0.2;
		Yscale 0.2;
	}
	States
	{
		Spawn:
			T1NT A 0 NODELAY { scale.Y = frandom(0.15, 0.22); }
			T1NT A 0 A_Jump (256, 1, 2, 3);
			T1NT A 1 A_Jump (256, "Live");
			T1NT B 1 A_Jump (256, "Live");
			T1NT C 1 A_Jump (256, "Live");
			LOOP;
		Pain:
			"####" "#" 5 { scale.X = frandom(0.15, 0.22); }
			"####" "#" 5 { scale.X = frandom(0.15, 0.22); }
			"####" "#" 5 { scale.X = frandom(0.15, 0.22); }
			"####" "#" 5 { scale.X = Default.scale.X; }
			GOTO Live;
		Death:
			"####" "#" 1
			{
				if(scale.Y>0.0){
					scale.Y-=0.001;
					A_SpawnItemEx("DSCbloodTrail", random(-8, 8), random(-8, 8), random(0, 32), random(-5, 5), random(-5, 5), random(1, 8),0,SXF_NOCHECKPOSITION, 200);
				}
				if(scale.X>0.0){
					scale.X-=0.001;
				}
				if(scale.Y<0.0){
					A_FadeOut(1.0);
				}
			}
			Loop;
		Live:
			"####" "#" 1;
			Loop;
		Raise:
			"####" "#" 1;
			GOTO Spawn;
	}
}
Class DSCtentyacleSwitchable : SwitchableDecoration
{
	float MaxScale;
	bool bSloped;
	Default
	{
		+SHOOTABLE;
		-PUSHABLE;
		+DONTTHRUST;
		PainChance 128;
		Height 256;
		DeathHeight 1;
		Health 999999999;
		DamageFactor 0.0;
		Radius 16;
		Renderstyle "Translucent";
		+FORCEYBILLBOARD;
		Alpha 1.0;
		Xscale 0.2;
		Yscale 0.2;
	}
	Override void PostBeginPlay()
	{
		MaxScale = frandom(0.15, 0.22);
		Super.PostBeginPlay();
	}
	override void Tick()
	{
		if(!bSloped)
		{
			AlignToSlope(self,self.angle,0.0);
			bSloped = true;
		}
		Super.Tick();
	}
    static void AlignToSlope(Actor self, double dAng, double dPitch)
    {
        vector3 fNormal = self.CurSector.FloorPlane.Normal;
        vector2 fNormalP1 = (fNormal.X != 0 || fNormal.Y != 0) ? (fNormal.X, fNormal.Y).Unit() : (0, 0);
        vector2 fNormalP2 = ((fNormal.X, fNormal.Y).Length(), fNormal.Z);
        double fAng = atan2(fNormalP1.Y, fNormalP1.X);
        double fPitch = -atan2(fNormalP2.X, fNormalP2.Y);
        double dDiff1 = sin(fAng - (dAng + dPitch));
        double dDiff2 = cos(fAng - dAng);
        self.Pitch = fPitch * dDiff2 + dPitch;
        self.Roll = fPitch * dDiff1;
        self.Angle = dAng;
    }
	States
	{
		Spawn:
			T1NT A 0 NODELAY { scale.Y = 0; scale.Y = 0; }
			T1NT A 0 A_Jump (256, 1, 2, 3);
			T1NT A 1 A_Jump (256, "Inactive");
			T1NT B 1 A_Jump (256, "Inactive");
			T1NT C 1 A_Jump (256, "Inactive");
			LOOP;
		Pain:
			"####" "#" 5 { scale.X = frandom(0.15, 0.22); }
			"####" "#" 5 { scale.X = frandom(0.15, 0.22); }
			"####" "#" 5 { scale.X = frandom(0.15, 0.22); }
			"####" "#" 5 { scale.X = Default.scale.X; }
			GOTO Live;
		Inactive:
			"####" "#" 1
			{
				if(scale.Y>0.0){
					scale.Y-=0.001;
					A_SpawnItemEx("DSCbloodTrail", random(-8, 8), random(-8, 8), random(0, 32), random(-5, 5), random(-5, 5), random(1, 8),0,SXF_NOCHECKPOSITION, 200);
				}
				if(scale.X>0.0){
					scale.X-=0.001;
				}
				if(scale.Y<0.0){
					bSolid = False;
				}
			}
			Loop;
		Active:
			"####" "#" 1
			{
				bSolid = True;
				if(scale.Y<MaxScale){
					scale.Y+=0.01;
					A_SpawnItemEx("DSCbloodTrail", random(-8, 8), random(-8, 8), random(0, 32), random(-5, 5), random(-5, 5), random(1, 8),0,SXF_NOCHECKPOSITION, 200);
				}
				if(scale.X<MaxScale){
					scale.X+=0.01;
				}
			}
			"####" "#" 0 A_jumpIf(scale.Y>=MaxScale, "Live");
			Loop;
		Live:
			"####" "#" 1;
			Loop;
		Death:
			"####" "#" 1;
			Loop;

	}
}


Class DSCskySmokeSpawner : SwitchableDecoration
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+SPAWNCEILING;
	}
	States
	{
		Spawn:
			TNT1 A 1;
		Goto Halt;
		Inactive:
			TNT1 A 1;
			Loop;
		Active:
			TNT1 A 1 {
				A_SpawnItemEx("DSCSeraphimRaiserLightSmoke", random(-128, 128), random(-128, 128), random(-32, 32), 0, 0, random(-12, -20), 0,SXF_NOCHECKPOSITION, 0, 0);
				}
			Loop;
		Halt:
			TNT1 A 1;
			Loop;
	}
}

Class DSCtitle : SwitchableDecoration
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+FORCEYBILLBOARD;
		Scale 0.3;
	}
	States
	{
		Spawn:
			TNT1 A 1;
		Goto Halt;
		Inactive:
			TNT1 A 1;
			Loop;
		Active:
			DSCT A 1 {
				A_FadeTo(1.0, 0.01);
				//A_SpawnItemEx("DSCSeraphimRaiserLightSmoke", random(-128, 128), random(-128, 128), random(-32, 32), 0, 0, random(3, 5), 0,SXF_NOCHECKPOSITION, 0, 0);
				A_SpawnItemEx("GiveAMMOsparckle", random(-256, 256), random(-256, 256), random(0, 256), random(-2, 2), random(-2, 2), random(-2, 2), 0,SXF_NOCHECKPOSITION, 0, 0);

				}
			Loop;
		Halt:
			TNT1 A 1 A_fadeTo(0.0, 1.0);
			Loop;
	}
}


Class DSCairlockController : Actor
{
/*
args[0] - inTid tid of gate to station
args[1] - outTid tid of gate to vacuum
*/
	int w;
	int h;
	int Count;
	int i;
	bool StartBurst;

	Override void PostBeginPlay()
	{
		Count = 35*5;
		w = args[2]?args[2]:32;
		h = args[3]?args[3]:128;
		i = 0;
		StartBurst = false;
		Super.PostBeginPlay();
	}

	Override void Tick()
	{
		if(StartBurst){
			if(i<Count){
				for(int s = 0; s<5; s++){
					A_SpawnItemEx( "DSCairParticle", random(-w, w), random(-h, h), random(-16,16), 0, 0, random(-5,-10),0, SXF_NOCHECKPOSITION, 0, 0);
				}
				i++;
			} else {
				i = 0;
				StartBurst = false;
				SetStateLabel("Inactive");
			}
		}
		Super.Tick();
	}

	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+FORCEYBILLBOARD;
	}
	States
	{
		Spawn:
			TNT1 A 1 NODELAY
				{
				a_fadeTo(1.0, 1.0);
				CallACS("Thing_DeActivate", args[1], 0, 0);
				//ActivateDeactivate.DeactivateByTid(self, args[1]);
				}
			Goto Inactive;
		Lock:
			TNT1 A 1 {
				StartBurst = true;
				a_fadeTo(0.0, 1.0);
				A_PlaySound("world/AirIntake", CHAN_BODY, 1.0, 0, ATTN_NORM);
				}
			Goto Inactive;
		Inactive:
			TNT1 A 1;
			Loop;
	}

}


Class DSCAirlockDecompression : SwitchableDecoration
{
	//args[0] - number of ticks to flow
	int Count;
	int i;
	bool StartBurst;
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+FORCEYBILLBOARD;
		Scale 0.3;
	}
	Override void PostBeginPlay()
	{
		Count = args[0]?args[0]:35*2;
		i = 0;
		StartBurst = false;
		Super.PostBeginPlay();
	}

	Override void Tick()
	{
		if(StartBurst){
			if(i<Count){
				A_SpawnItemEx( "DSCairParticle", random(-8,8), random(-96,96), random(-32,32), random(8,10), 0, 0,0, SXF_NOCHECKPOSITION, 0, 0);
				i++;
			} else {
				i = 0;
				StartBurst = false;
				SetStateLabel("Inactive");
			}
		}
		Super.Tick();
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Inactive:
			TNT1 A 1;
			Loop;
		Active:
			TNT1 A 1 A_JumpIf(CallACS("AirlockControlOutflow", tid, 0, 0), "Flow");
			Loop;
		Flow:
			TNT1 A 1 {
			/*
world/AirFlow AIRFLOW
world/AirIntake AIRIN
			*/
				StartBurst = true;
				A_PlaySound("world/AirFlow", CHAN_BODY, 1.0, 0, ATTN_NORM);
			}
			Goto Inactive;
	}
}


Class DSCairParticle : Actor
{
	int Rotation;

	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+FORCEXYBILLBOARD;
		+ROLLSPRITE;
		Renderstyle "Translucent";
		Alpha 0.3;
		Scale 1.0;
	}
	Override void PostBeginPlay(){ if(random(0, 1)){ Rotation = 10;	} else {Rotation = -10;} Super.PostBeginPlay();}

	States
	{
		Spawn:
			AIR0 A 1
			{
				A_SetRoll(roll+Rotation,SPF_INTERPOLATE);
				A_fadeOut(0.02);
			}
			Loop;
	}
}

Class DSCdestroyer : SwitchableDecoration
{
	double Radius;
	Override void PostBeginPlay()
	{
		Radius = args[0]?args[0]:128;
		Super.PostBeginPlay();
	}
	void Demolition(){
		BlockThingsIterator it = BlockThingsIterator.Create(self, Radius);
		Actor mo;
		While(it.Next()){
			mo = it.Thing;
			if (mo == self || mo is "PlayerPawn" || mo is "DSCdestroyer"){
				continue;
			} else {
				mo.Destroy();
			}
		}
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Inactive:
			TNT1 A 1;
			Loop;
		Active:
			TNT1 A 1 Demolition();
			Goto Inactive;
	}

}

//////////////////////////////////////////
struct DestroyIterator play
{
	private Actor caller;

	private void PrintErrorMessage(int message)
	{
		string errorMessage = "";
		switch (message)
		{
			case -1:
				errorMessage = "No Actor specified";
			break;

			case -2:
				errorMessage = "No caller specified";
			break;

			Default: break;
		}
		Console.Printf(errorMessage);
	}

	void Init(Actor mo)
	{
		if(mo) caller = mo;
	}

	void DestroyActors(Class<Actor> actorType, double distance)
	{
		if(caller)
		{
			int result = DoDestroyActors(actorType, distance);

			if(result < 0)
			{
				PrintErrorMessage(result);
				return;
			}
		}
	}

	private int DoDestroyActors(Class<Actor> actorType, double distance)
	{
		if(!actorType) return -1;
		if(!caller) return -2;

		ThinkerIterator it = ThinkerIterator.Create(actorType);

		Actor mo;
		while(mo = Actor(it.Next()))
		{
			if (!(mo is actorType) || mo == caller || mo is "PlayerPawn") continue;

			if( mo is "Inventory")
			{
				let inv = Inventory(mo);
				if(inv.Owner != Null) continue;
			}

			if(distance <= 0.0 || caller.Distance3D(mo) <= distance)
			{
				mo.Destroy();
				continue;
			}
		}

		return 0;
	}
}

Class DSCcustomDestroyer : SwitchableDecoration
{
	DestroyIterator dIt;
	string ActorClass;

	Default
	{
        +NOSECTOR
        +NOINTERACTION
        +THRUACTORS
        +NOBLOCKMAP
	}
	Override void PostBeginPlay()
	{
		switch (args[1]){
			Case 1:
				ActorClass = "SwitchableDecoration";
				Break;
			Case 2:
				ActorClass = "Ammo";
				Break;
			Default:
				ActorClass = "Actor";
		}
		Super.PostBeginPlay();
	}
	virtual void InitDestroyer()
	{
		dIt.Init(self);
		dIt.DestroyActors(ActorClass, args[0]?args[0]:128);
	}


	States
	{
		Spawn:
			TNT1 A 1;
			Goto Inactive;
		Inactive:
			TNT1 A 1;
			Loop;
		Active:
			TNT1 A 1 {
			self.InitDestroyer();
			}
			Goto Inactive;
	}

}


Class KeyCardIndicator : Actor
{
	Default
	{
        +NOINTERACTION;
		+WALLSPRITE;
		RenderStyle "Add";
		Scale 0.25;
	}
	States
	{
		Spawn:
			KCRD A 1;
			LOOP;
	}
}

Class KeyCardIndicatorYellow : KeyCardIndicator
{
}
Class KeyCardIndicatorRed : KeyCardIndicator
{
	States
	{
		Spawn:
			KCRD B 1;
			LOOP;
	}
}
Class KeyCardIndicatorBlue : KeyCardIndicator
{
	States
	{
		Spawn:
			KCRD C 1;
			LOOP;
	}
}

Class ShotgunGot : Inventory { Default { Inventory.MaxAmount 1; } }
Class ssgGot : Inventory { Default { Inventory.MaxAmount 1; } }
Class ChaingunGot : Inventory { Default { Inventory.MaxAmount 1; } }
Class RLCGot : Inventory { Default { Inventory.MaxAmount 1; } }
Class PlasmaGot : Inventory { Default { Inventory.MaxAmount 1; } }
Class BfgGot : Inventory { Default { Inventory.MaxAmount 1; } }


Class map01done : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; } }
Class map02done : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; } }
Class map03done : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF;} }
Class map04done : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; } }
Class map05done : Inventory {  Default { Inventory.MaxAmount 0x7FFFFFFF; } }
Class map06done : Inventory {  Default { Inventory.MaxAmount 0x7FFFFFFF; } }
Class map07done : Inventory {  Default { Inventory.MaxAmount 0x7FFFFFFF; } }
Class map08done : Inventory {  Default { Inventory.MaxAmount 0x7FFFFFFF; } }
Class map09done : Inventory {  Default { Inventory.MaxAmount 0x7FFFFFFF; } }
Class map10done : Inventory {  Default { Inventory.MaxAmount 0x7FFFFFFF; } }

Class map10cunsceneShown : Inventory {  Default { Inventory.MaxAmount 0x7FFFFFFF; } }
