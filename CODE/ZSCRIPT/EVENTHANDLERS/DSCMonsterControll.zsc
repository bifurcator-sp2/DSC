class DSCMonsterPopulation : Thinker
{
    int monsterCount;

    DSCMonsterPopulation Init ()
    {
        ChangeStatNum(STAT_STATIC);
        return self;
    }

    static DSCMonsterPopulation Get ()
    {
        ThinkerIterator it = ThinkerIterator.Create("DSCMonsterPopulation", STAT_STATIC);
        let p = DSCMonsterPopulation(it.Next());

        if(p == null)
        {
            p = new("DSCMonsterPopulation").Init();
        }

        return p;
    }
}

class IncKillCounter : CustomInventory
{
    default
    {
        Inventory.Maxamount 0x7FFFFFFF;
    }

    states
    {
        Pickup:
        TNT1 A 0 Acs_NamedExecuteAlways("MonsterKilled");
        Stop;
    }
}

class DSCMonstersEvent : EventHandler
{
    int monsterCounter;
    int timerForKill;

    override void PlayerEntered(PlayerEvent e)
    {
        Super.PlayerEntered(e);
        PlayerInfo player = players[e.PlayerNumber];
        CVar dsc_spawn_factor = CVar.FindCVar("dsc_spawn_factor");
        if(dsc_spawn_factor.getInt()<1){dsc_spawn_factor.SetFloat(1.0);}
        /*
        if(player.mo.GetClassName()=="DoomPlayer" || player.mo.GetClassName()=="Doomer"){
                dsc_spawn_factor.SetFloat(0.5);
        }
        if(player.mo.GetClassName()=="Guncaster"){
                dsc_spawn_factor.SetFloat(1.0);
        }
        */
        //player.mo.giveInventory("DistanceControllerItem", 1);
    }


    override void WorldThingDamaged(WorldEvent e)
    {
        let plr = PlayerPawn(e.DamageSource);

        if (plr && e.Thing.Health <= 0 && e.Thing.bISMONSTER && e.Thing.bCOUNTKILL && e.Thing.default.Health>=20)
        {
                //A_PrintBold(Thing.default.Health);
                plr.GiveInventory("IncKillCounter",1);
                CallACS("AbsorbHealth", e.Thing.default.Health);
        }
    }

    override void WorldThingDied(WorldEvent e)
    {
        PlayerInfo players = players[consoleplayer];
        let mo = e.Thing;
        let monCount = DSCMonsterPopulation.Get();


        if ( mo is "DSCZombieMan" || mo is "DSCdoomImp" || mo is "DSCcacodemon" || "DSCHellKnight")
        {
                if(monCount) --monCount.monsterCount;
                //players.mo.Acs_NamedExecuteAlways("MonsterDied",0);
        }
        if ( !mo.bISMONSTER || mo.bNOINTERACTION) return;

        if(monCount) {
                --monCount.monsterCount;
                players.mo.Acs_NamedExecuteAlways("MonsterDied",0);
        }
    }

    override void WorldUnloaded(WorldEvent e)
    {
        let monCount = DSCMonsterPopulation.Get();
        if(monCount) monCount.monsterCount = 0;
    }

    override void WorldTick()
    {
        PlayerInfo players = players[consoleplayer];
        let monCount = DSCMonsterPopulation.Get();
        if(monCount.monsterCount < 0) monCount.monsterCount = 0;
        if(monCount.monsterCount == 0)
        {
            timerForKill = 0;
        }
        if(monCount.monsterCount == 1)
        {
            timerForKill++;
        }
        if (timerForKill >= 2100)
        {
            timerForKill = 0;
            monCount.monsterCount = 0;
        }
        monsterCounter = monCount.monsterCount;
        //if ( !(level.mapName == "TITLEMAP") ) players.mo.Acs_NamedExecuteAlways("NewMonsterIsSpawned",0,monsterCounter);
        if ( !(level.mapName == "TITLEMAP") && level.mapName.Left(6) == "DSCMAP" ) players.mo.Acs_NamedExecuteAlways("NewMonsterIsSpawned",0,monsterCounter);


        if(Cvar.GetCVar("dsc_zfinish_wave", players).GetInt()>0){
            //players.a_logINT(Cvar.GetCVar("dsc_zfinish_wave", players).GetInt());
            Cvar.GetCVar("dsc_zfinish_wave", players).SetInt(0);
            let monCount = DSCMonsterPopulation.Get();
            if(monCount) monCount.monsterCount = 0;
            //players.a_logINT(Cvar.GetCVar("dsc_zfinish_wave", players).GetInt());

            ThinkerIterator it = ThinkerIterator.Create("DSCmonsterSpawner");
            DSCmonsterSpawner this;
            while(this = DSCmonsterSpawner(it.Next())){
                    this.Repeats = 0;
            }
        }
    }

/*  override void WorldThingRevived(WorldEvent e)
    {
        let mo = e.Thing;
        if (!mo || !mo.bISMONSTER || mo.bNOINTERACTION) return;
        monsterCount++;
    }
    override void WorldThingDestroyed(WorldEvent e)
    {
        let mo = e.Thing;
        if (!mo || !mo.bISMONSTER || mo.bNOINTERACTION) return;
        monsterCount--;
    }*/
}
