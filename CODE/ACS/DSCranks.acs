int AchiveKillInSEc1 = 0;
int AchiveDieInSec1 = 0;
int AchiveKillInSEc10 = 0;


//DSCplayerRank


/*
0. Numb - mod default

1. Recruit (50 kills):
ArmorBonus 1


2. Guardian (100 kills)
ArmorBonus 2
AbsorbHealth 2% - max 200


3. Warrior(200 kills)
ArmorBonus 3
AbsorbHealth 3% - max 220


4. Destroyer(400 kills):
ArmorBonus 4
AbsorbHealth 4% - max 250


5. Blood Seeker (800 kills):
ArmorBonus 5
AbsorbHealth 5% - max 270


6. Demon Hunter  (1600 kills):
ArmorBonus 6
AbsorbHealth 6% - max 300


7. Hell Walker (3200 kills):
ArmorBonus 7
AbsorbHealth 7% - max 330


8. Doom Slayer (6400 kills):
ArmorBonus 8
AbsorbHealth 8% - max 370


9. Hell's Death (12800 kills):
ArmorBonus 9
AbsorbHealth 10% - max 400

*/

Script "ArmorBonus" (int amount, int multipler){
	if(multipler<=0){multipler=1;}
	switch (DSCplayerRank) {
		case 1:
			multipler = 1;
			break;
		case 2:
			multipler = 2;
			break;
		case 3:
			multipler = 3;
			break;
		case 4:
			multipler = 4;
			break;
		case 5:
			multipler = 5;
			break;
		case 6:
			multipler = 6;
			break;
		case 7:
			multipler = 7;
			break;
		case 8:
			multipler = 8;
			break;
		case 9:
			multipler = 9;
			break;
		default:
			terminate;
	}
	GiveActorInventory(0, "DSCarmorBonus", amount*multipler);
}
script "AbsorbHealth" (int HealthAmount){
	int multipler = 0;
	//HealthAmount killed monster health
	switch (DSCplayerRank) {
		case 2:
			multipler = 2;
			GiveActorInventory(0, "DSChealthBonus", HealthAmount*multipler/100);
			break;
		case 3:
			multipler = 3;
			GiveActorInventory(0, "DSChealthBonus220", HealthAmount*multipler/100);
			break;
		case 4:
			multipler = 4;
			GiveActorInventory(0, "DSChealthBonus250", HealthAmount*multipler/100);
			break;
		case 5:
			multipler = 5;
			GiveActorInventory(0, "DSChealthBonus270", HealthAmount*multipler/100);
			break;
		case 6:
			multipler = 6;
			GiveActorInventory(0, "DSChealthBonus300", HealthAmount*multipler/100);
			break;
		case 7:
			multipler = 7;
			GiveActorInventory(0, "DSChealthBonus330", HealthAmount*multipler/100);
			break;
		case 8:
			multipler = 8;
			GiveActorInventory(0, "DSChealthBonus370", HealthAmount*multipler/100);
			break;
		case 9:
			multipler = 10;
			GiveActorInventory(0, "DSChealthBonus400", HealthAmount*multipler/100);
			break;
		default:
			terminate;
	}
	//int HealthToGive = HealthAmount*multipler/100;

	//GiveActorInventory(0, "DSChealthBonus", HealthToGive);
}

function int getRank (void){
	int TK = TotalKills+GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
	if(TK>=12800){
		DSCplayerAbilities = "Absorb Health: 10% - max 400\nArmor boonus 2";
		return 9;
	}
	if(TK>=6400){
		DSCplayerAbilities = "Absorb Health: 8% - max 370\nArmor boonus 2";
		return 8;
	}
	if(TK>=3200){
		DSCplayerAbilities = "Absorb Health: 7% - max 330\nArmor boonus 2";
		return 7;
	}
	if(TK>=1600){
		DSCplayerAbilities = "Absorb Health: 6% - max 300\nArmor boonus 2";
		return 6;
	}
	if(TK>=800){
		DSCplayerAbilities = "Absorb Health: 5% - max 270\nArmor boonus 2";
		return 5;
	}
	if(TK>=400){
		DSCplayerAbilities = "Absorb Health: 4% - max 250\nArmor boonus 2";
		return 4;
	}
	if(TK>=200){
		DSCplayerAbilities = "Absorb Health: 3% - max 220\nArmor boonus 2";
		return 3;
	}
	if(TK>=100){
		DSCplayerAbilities = "Absorb Health: 2% - max 200\nArmor boonus 2";
		return 2;
	}
	if(TK>=5){
		DSCplayerAbilities = "Armor boonus 1";
		return 1;
	}
	DSCplayerAbilities = "Default abilities for current playes class";
	return 0;
}
function int getKillsToRank (int CurrentKills){
	if(CurrentKills<50){
		return 50-CurrentKills;
	}
	if(CurrentKills<100){
		return 100-CurrentKills;
	}
	if(CurrentKills<200){
		return 200-CurrentKills;
	}
	if(CurrentKills<400){
		return 400-CurrentKills;
	}
	if(CurrentKills<800){
		return 800-CurrentKills;
	}
	if(CurrentKills<1600){
		return 1600-CurrentKills;
	}
	if(CurrentKills<3200){
		return 3200-CurrentKills;
	}
	if(CurrentKills<6400){
		return 6400-CurrentKills;
	}
	if(CurrentKills<12800){
		return 12800-CurrentKills;
	}

	return 50;
}
function str getRankString (int rank){
	IF(!rank){rank=DSCplayerRank;}
	switch (rank) {
		case 1:
			return "Recruit";
		case 2:
			return "Guardian";
		case 3:
			return "Warrior";
		case 4:
			return "Destroyer";
		case 5:
			return "Blood Seeker";
		case 6:
			return "Demon Hunter";
		case 7:
			return "Hell Walker";
		case 8:
			return "Doom Slayer";
		case 9:
			return "Hell's Death";
	}
	return "Numb";
}

script "FadePlayerScreen" ENTER {
	delay(5);
	//ACS_NamedExecute("DisplayNextRank", 0);
	while(1){
		if(DSCscreenFade>0){
			FadeTo (0, 0, 0, 0.8, 1.0);
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			//delay(DSCscreenFade);
			//FadeTo (0, 0, 0, 0.0, 1.0);
			//DSCscreenFade = 0;
		}
		if(DSCscreenFade<0){
			FadeTo (0, 0, 0, 0.0, 1.0);
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			DSCscreenFade=0;
		}
		Delay(5);
	}
}



Script "DisplayRankInfo" ENTER
{

	while (TRUE) {
		int TK = TotalKills+GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
		int mtotal = GetTotalMonsters();
		if(mtotal==0){
			SetFont("SMALLFONT");
			HudMessage(
			i:TK, s:" killed demons total";
			HUDMSG_PLAIN,776,CR_DARKRED,0.2,0.02,1,0);
			SetFont("BIGFONT");
			HudMessage(
			s:"Rank: ", s:getRankString (0), s:"";
			HUDMSG_PLAIN,777,CR_DARKRED,0.5,0.05,1,0);
			SetFont("SMALLFONT");
			HudMessage(
			s:"Next Rank: ", s:getRankString(DSCplayerRank+1), s:" (", i:getKillsToRank(TK), s:" kills)";
			HUDMSG_PLAIN,778,CR_DARKRED,0.8,0.02,1,0);
		} else {
			HudMessage(s:"";HUDMSG_PLAIN,776,CR_DARKRED,0.2,0.02,1,0);
			HudMessage(s:"";HUDMSG_PLAIN,777,CR_DARKRED,0.2,0.02,1,0);
			HudMessage(s:"";HUDMSG_PLAIN,778,CR_DARKRED,0.2,0.02,1,0);
		}

		Delay(35);

	}
}
script "DisplayNextRank" (void){
	int NewRank = getRank();
	delay(1);
	DSCscreenFade = 1;
	for(int i = 0; i<=9; i++){
		SoundVolume (0, i, 0.0);
	}

	PlaySound (0, "world/RACHIVE" , 64, 1.0, false, ATTN_NONE);

	HudMessageBold(s:""; HUDMSG_PLAIN, 800, CR_RED, 0.5, 0.3, 0);
	HudMessageBold(s:""; HUDMSG_PLAIN, 801, CR_RED, 0.5, 0.3, 0);
	HudMessageBold(s:""; HUDMSG_PLAIN, 802, CR_RED, 0.5, 0.3, 0);
	HudMessageBold(s:""; HUDMSG_PLAIN, 803, CR_RED, 0.5, 0.3, 0);

	SetFont("BIGFONT");
	if(DSCplayerRank !=NewRank){
		DSCplayerRank = getRank();
		HudMessageBold(s:"You gained ", s:getRankString(0), s:" rank" ;
			HUDMSG_PLAIN, 800, CR_RED, 0.5, 0.3, 0);
	} else {
		HudMessageBold(s:"Current rank is: ", s:getRankString(0);
			HUDMSG_PLAIN, 801, CR_RED, 0.5, 0.3, 0);
	}
	SetFont("SMALLFONT");
	HudMessageBold(s:"Abilities:\n", s:DSCplayerAbilities;
		HUDMSG_PLAIN, 802, CR_CREAM, 0.5, 0.4, 0);

	HudMessageBold(s:"Press USE button to continue.";
		HUDMSG_PLAIN, 803, CR_CREAM, 0.5, 0.9, 0);


	for( i = 0; i<=9; i++){
		SoundVolume (0, i, 1.0);
	}
	while (!(GetPlayerInput(0, INPUT_BUTTONS) & BT_USE) || (GetPlayerInput(0, INPUT_OLDBUTTONS) & BT_USE))
	{
	delay(1);
	}
	DSCscreenFade = -1;
	HudMessageBold(s:""; HUDMSG_PLAIN, 800, CR_RED, 0.5, 0.3, 0);
	HudMessageBold(s:""; HUDMSG_PLAIN, 801, CR_RED, 0.5, 0.3, 0);
	HudMessageBold(s:""; HUDMSG_PLAIN, 802, CR_RED, 0.5, 0.3, 0);
	HudMessageBold(s:""; HUDMSG_PLAIN, 803, CR_RED, 0.5, 0.3, 0);
	/*
int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
if (buttons & (BT_ATTACK)) { print(s:"You could be pressing the attack key."); }
*/
}



SCRIPT "ResetCounters" ENTER {
	NextWaveReady = false;
	WaveOnline = false;
	IgnoreWaveMusicChange = false;
	SpawnedMonstersOnTheMap = 0;
	AchiveKillInSEc1 = 0;
	AchiveDieInSec1 = 0;

}
script "MonsterKilled" (void){
	AchiveKillInSEc1++;
	SaintHealthUpMultipler++;
	ACS_NamedExecute("AchiveKillInSEc1Counter", 0);

}

script "MonsterDied" (void){
	AchiveDieInSec1++;
	AchiveKillInSEc10++;
	ACS_NamedExecute("AchiveKillInSEc1Counter", 0);
	ACS_NamedExecute("AchiveKillInSEc10Counter", 0);
}

SCRIPT "AchiveKillInSEc10Counter" (void)
{
	delay(35*10);
	if(AchiveKillInSEc10>=20){

		PrintBold(s:"You are real DOOM SLAYER!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
		AchiveKillInSEc10 = 0;
		terminate;
	}
	if(AchiveKillInSEc10>=10){

		PrintBold(s:"You are GREAT!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
		AchiveKillInSEc10 = 0;
		terminate;
	}
	if(AchiveKillInSEc10>=5){

		PrintBold(s:"Good work!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
		AchiveKillInSEc10 = 0;
		terminate;
	}


	AchiveKillInSEc10 = 0;

}



SCRIPT "AchiveKillInSEc1Counter" (void)
{
//GiveActorInventory(0, "DSCarmorBonus", 5);
	delay(35);
	//PrintBold(i:AchiveKillInSEc1);

	if(AchiveDieInSec1>=20 || AchiveKillInSEc1>=20){
		ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
		if(BE()){
			GiveActorInventory(0, "D4QuadDamage", 1);
			GiveActorInventory(0, "d4haste", 1);
		}
		Log(s:"Real epic doomslayer tolal bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 6);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		if(BE()){
			GiveActorInventory(0, "d4haste", 1);
		}
		terminate;
	}
	if(AchiveDieInSec1>=15){
		ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
		if(Random(1, 100)<=40 && BE()){
			GiveActorInventory(0, "D4QuadDamage", 1);
		}
		if(Random(1, 100)<=60 && BE()){
			GiveActorInventory(0, "d4haste", 1);
		}
		Log(s:"Tolal bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 5);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		if(BE()){
			GiveActorInventory(0, "d4haste", 1);
		}
		terminate;
	}
	if(AchiveDieInSec1>=10 ){
		ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
		if(Random(1, 100)<=30 && BE()){
			GiveActorInventory(0, "D4QuadDamage", 1);
		}
		if(Random(1, 100)<=50 && BE()){
			GiveActorInventory(0, "d4haste", 1);
		}
		Log(s:"Yeah...Great bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 4);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		terminate;
	}
	if(AchiveDieInSec1>=5){
		if(BE()){
			GiveActorInventory(0, "d4haste", 1);
		}
	}

	if(AchiveDieInSec1>3){
		ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
		if(Random(1, 100)<=20 && BE()){
			GiveActorInventory(0, "D4QuadDamage", 1);
		}
		if(Random(1, 100)<=40 && BE()){
			GiveActorInventory(0, "d4haste", 1);
		}

		Log(s:"Bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 3);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		terminate;
	}

	if(AchiveKillInSEc1==3){
		ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
		if(Random(1, 100)<=15 && BE()){
			GiveActorInventory(0, "D4QuadDamage", 1);
		}
		if(Random(1, 100)<=30 && BE()){
			GiveActorInventory(0, "d4haste", 1);
		}
		Log(s:"Tripple death\n", i:AchiveKillInSEc1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 2);
		SaintHealthUpMultipler+=AchiveKillInSEc1;
		terminate;
	}
	if(AchiveKillInSEc1==2){
		ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
		if(Random(1, 100)<=20 && BE()){
			GiveActorInventory(0, "d4haste", 1);
		}

		Log(s:"Double death\n", i:AchiveKillInSEc1, s:" kills in sec!");
		AchiveKillInSEc1 = 0;
		AchiveDieInSec1 = 0;
		ACS_NamedExecute("TimeKillVoiceSec1", 0, 1);
		SaintHealthUpMultipler+=2;
		terminate;
	}
	AchiveKillInSEc1 = 0;
	AchiveDieInSec1 = 0;

}






Script "TimeKillVoiceSec1" (int soundID){
	ACS_NamedExecuteAlways("MuteMusic", 0, 35+15);
	delay(15);
	for(int i = 0; i<=9; i++){
		SoundVolume (0, i, 0.0);
	}
	switch (soundID) {
		case 1:
		PlaySound (0, "DSCACHV2R" , 64, 1.0, false, ATTN_NONE);
		break;
		case 2:
		PlaySound (0, "world/DSCACHV4" , 64, 1.0, false, ATTN_NONE);
		break;
		case 3:
		PlaySound (0, "world/DSCACHV5" , 64, 1.0, false, ATTN_NONE);
		break;
		case 4:
		PlaySound (0, "world/DSCACHV6" , 64, 1.0, false, ATTN_NONE);
		break;
		case 5:
		PlaySound (0, "world/DSCACHV7" , 64, 1.0, false, ATTN_NONE);
		break;
		case 6:
		PlaySound (0, "world/DSCACHV8" , 64, 1.0, false, ATTN_NONE);
		break;
	}
	delay(35);
	for( i = 0; i<=9; i++){
		SoundVolume (0, i, 1.0);
	}
}

script "SaintHealthUp" (void){
	SetResultValue(SaintHealthUpMultipler*SaintHealthUpBaseAmount);
	SaintHealthUpMultipler = 0;
}
