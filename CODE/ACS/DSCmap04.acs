#include "F:\Games\gzdoom\mywads\DSC\DSC.git\DSC\CODE\ACS\DSCcommon.acs"
#include "F:\Games\gzdoom\mywads\DSC\DSC.git\DSC\CODE\ACS\DSCwaves.acs"
#include "F:\Games\gzdoom\mywads\DSC\DSC.git\DSC\CODE\ACS\DSCranks.acs"

bool ArenaFloorActive = true;
bool ArenaLiftsActive = true;
bool TribuneTeleportsActive = false;


SCRIPT "StartLevel" ENTER
{
//NOspawn = true;
//TEST!


/*
CurrentWave = 35;
AmmoMaxRnd = 3;
WeaponGotID = 4;
*/

//TEST!

}

SCRIPT "SpawnFirstScull" (void){
		SpawnSpotFacingForced("WaveScullDEC", 5, 100600);
		SetThingSpecial(100600, ACS_NamedExecute, "NextWaveReady");
}



SCRIPT "StartControl" ENTER
{
	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;

	ACS_NamedExecuteAlways("SpawnWave", 0, 100500, 5, 100400);
	ACS_NamedExecuteAlways("Mus_L1", 0);

	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;
	ACS_NamedExecuteAlways("SpawnWave", 0, 100501, 5, 100400);
	ACS_NamedExecuteAlways("Mus_L1", 0);

	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;


	Door_Raise(6, 8, -1);

	ACS_NamedExecuteAlways("SpawnWave", 0, 100502, 7, 100401);
	ACS_NamedExecuteAlways("Mus_M1", 0);

	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;

	ACS_NamedExecuteAlways("SpawnWave", 0, 100503, 7, 100401);
	ACS_NamedExecuteAlways("Mus_M1", 0);
	Delay(35*30);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100504, 888888, 888888);


	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;


	ACS_NamedExecuteAlways("Mus_M2", 0);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100505, 8, 100402);
	//ACS_NamedExecuteAlways("SpawnWave", 0, 100500, 888888, 888888);

	Delay(35*5);
	Door_Raise(9, 8, -1);

	Delay(35);
	while(WaveOnline){ Delay(5);}


	Ceiling_RaiseByValue (10, 8, 120);//ворота на арену
///////////////////////////////////////////////
//Arena battle
///////////////////////////////////////////////

	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;
	ACS_NamedExecuteAlways("Mus_M2", 0);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100506, 8, 100402);
	Delay(35*15);
	Ceiling_RaiseByValue (12, 8, 120);//вторые ворота арены



	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;
	ACS_NamedExecuteAlways("Mus_G1", 0);
	Ceiling_LowerByValue (12, 32, 120);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100508, 8, 100402);

	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;
	ACS_NamedExecuteAlways("Mus_G1", 0);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100509, 8, 100402);
	ACS_NamedExecute("ActivateArenaFloor", 0);

	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;
	ACS_NamedExecuteAlways("Mus_G1", 0);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100508, 8, 100402);
	Delay(35*30);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100509, 888888, 888888);



	//ACS_NamedExecute("TribuneCount", 0);
	//TribuneTeleportsActive = true;


	while(!NextWaveReady){
		delay(1);
	}
	delay(1);
	NextWaveReady = false;

	ACS_NamedExecuteAlways("Mus_G2", 0);

	ACS_NamedExecute("ActivateTribunes", 0);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100506, 888888, 888888);
	Delay(35*15);
	Ceiling_RaiseByValue (12, 8, 120);

	delay(35*20);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100510, 888888, 888888);//боссы и свита
	//суть проблемы в том, что в брутальных модах поправщик кглюка стерает признак крайних пары монстров


	 NoiseAlert(0, 131313);
	ACS_NamedExecute("TribuneLiftsStart", 0);

	while(ThingCount(T_NONE, 131313)>50){
		//ждем пока останется не менее 50 зрителей
		delay(15);
	}

///////////////////////////////////////////////
//Arena tribunes teleports
//Bosses go in
///////////////////////////////////////////////
	TribuneTeleportsActive = true;
	Door_Raise(13, 8, -1);
	//Teleport_NoStop (tid, sectortag, nofog);
	while(ThingCount(T_NONE, 131313)>10){
		//ждем пока зрителей больше 10
		delay(15);
	}
	//InvulnerabilitySphere
	//Megasphere
	//Soulsphere
	int Rand = Random(1,3);
	if(Rand==1){ SpawnSpotFacingForced("InvulnerabilitySphere", 30, 0);}
	if(Rand==2){ SpawnSpotFacingForced("Megasphere", 30, 0);}
	if(Rand==3){ SpawnSpotFacingForced("Soulsphere", 30, 0);}
	PrintBold(s:"Sphere spawned");

	ArenaFloorActive = false;
	delay(35*5);//ждем пока остановятся полы арены
	Floor_MoveToValue(14, 16, 8);//опускаем лифты с боссами
	ACS_NamedExecuteAlways("SpawnWave", 0, 100509, 8, 100402);//еще народу чтобы череп появился

	while(!NextWaveReady){
		delay(1);
	}
	NextWaveReady = false;

	for(int i = 5; i > 0; i--)
	{
		Print(s:"Your personal HELL will restart \nin ",d:i,s:" seconds");
		Delay(35);
	}
	GiveInventory("map04done", 1);
	TotalKills = TotalKills + GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
	Atrium1Active = true;
	Exit_Normal(0);

}

script "TribuneCount" (void){
	printBold(s: "Tribunes: ", i:ThingCount(T_NONE, 131313));
	delay(15);
	restart;
}


script "CloseDoorToArena" (void){

	ACS_NamedExecuteAlways("Mus_G3", 0);
	delay(5);
	IgnoreWaveMusicChange = true;
	Ceiling_LowerByValue(10, 500, 120);
	ACS_NamedExecuteAlways("SpawnWave", 0, 100507, 888888, 888888);
}

script "ActivateArenaFloor" (void){
	int counter;
	for (counter = 200; counter <= 217; counter++){
		ACS_NamedExecuteAlways("RandomFloorRaiser", 0, counter);
	}
}
script "DeActivateArenaFloor" (void){
	ArenaFloorActive = false;
	//PrintBold(s:"Stop");
}

script "RandomFloorRaiser" (int tag){
	if(ArenaFloorActive==true){
		delay(random(35*5, 35*20));
		Floor_RaiseByValue(tag, 32, 128);
		delay(random(35*5, 35*20));
		Floor_LowerByValue(tag, 32, 128);
		restart;
	} else {
		delay(35*25);
		Floor_MoveToValue(tag, 32, 0);
	}
}

script "ActivateTribunes" (void){
	SetActorState(131313, "BecomeMonster");
}

Script "TribuneLiftsStart" (void){
	int counter;
	for (counter = 220; counter <= 224; counter++){
		ACS_NamedExecuteAlways("TribuneLiftRaiser", 0, counter);
	}
}
script "TribuneLiftsDeactivate" (void){
	ArenaLiftsActive = false;
	//PrintBold(s:"Stop");
}
script "TribuneLiftRaiser" (int tag){
	if(ArenaLiftsActive==true){
		delay(random(35*3, 35*5));
		Floor_LowerByValue(tag, 32, 120);
		delay(random(35*5, 35*10));
		Floor_RaiseByValue(tag, 32, 120);
		restart;
	} else {
		delay(35*25);
		Floor_MoveToValue(tag, 32, 128);
	}
}

script "TribuneTeleport"(int tid){
	if(TribuneTeleportsActive){
		Teleport_NoStop(tid, 0, false);
	}
}

//ACS_NamedTerminate (string script, int map)
//200-217
