Bool WaveOnline = false;

bool PlayerInVaquum = false;
bool PlayerInAirlock = true;
bool ExternalCamera;
str MapEndText;

script "ResetControl" ENTER
{
	if(GetUserCVar(0, "dsc_restore_defaults")==true){
		SetUserCVar(0, "dsc_restore_defaults", false);

		SetUserCVar(0, "dsc_spawn_factor", 1.3);
		SetUserCVar(0, "dsc_heroic_mode", false);
		SetUserCVar(0, "dpwh_filmictonemap", true);
		SetUserCVar(0, "dpwh_chromaticAberration", true);
		SetUserCVar(0, "dpwh_naturalVignette", false);

	}
	delay(1);
	restart;
}

script "enterfade" enter
{
	//MapEndText = StrParam(l:"MAP_ENDING_TEXT");
	Autosave();
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	Delay(1);
	SetMusicVolume(0.0);
	FadeTo (0, 0, 0, 1.0, 0.0 );
	for(int i = 0; i<=9; i++){SoundVolume (0, i, 0.0);}
}
int totalsound=0;

script "enterSOUNDin" enter
{
	delay(15);

	Floor_LowerToLowest(171717, 10000);
	SoundSequenceOnSector(171717, "___", 0);
	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	while(totalsound<100){
		for(int i = 0; i<=128; i++){
			SoundVolume (0, i, FixedDiv(totalsound, 100));
		}
		SetMusicVolume(FixedDiv(totalsound, 100));
		totalsound++;
		delay(2);
	}
	for(i = 0; i<=128; i++){SoundVolume (0, i, 1.0);}
	SetMusicVolume(1.0);
}

script "enterfadein" enter
{
	delay(15);
	FadeTo (0, 0, 0, 0.0, 5.0 );
}

function int GetFn(int offset){
	if(offset <= 2){
		return	offset;
	}
	return GetFn(offset - 1) + GetFn(offset - 2);
	//return (offset <= 2) ? offset : GetFn(offset - 1) + GetFn(offset - 2);
}

Script "SequenceSwitch" (int ControllerTag, int length, int offset){
	//CallbackScript is numbered by ControllerTag
	//ErrorCallbackScript is numbered by BadResultTag
	//offset button offset

	PlaySound(0, "world/cp_ok", CHAN_AUTO, 1.0,  false, ATTN_NORM );
	delay(35);
	int curOffset = GetActorAngle(ControllerTag);
	int value = GetActorZ(ControllerTag);//  number of curOffset

	SetActorAngle(ControllerTag, GetActorAngle(ControllerTag)+1);//curOffset ++

	if(curOffset==0){
		if(offset==1){
			SetActorPosition(ControllerTag, GetActorX(ControllerTag), GetActorY(ControllerTag), 1, 0);
		}
		terminate;
	}

	//PrintBold(i:curOffset, s:" ", i:offset);

	if(curOffset==value){
		if(curOffset==length-1  ){
			ACS_Execute(ControllerTag, 0, true);//callback
			terminate;
		}
		//good sequence

		SetActorPosition(ControllerTag, GetActorX(ControllerTag), GetActorY(ControllerTag), offset, 0);
	}

	if(curOffset==length-1){
		ACS_Execute(ControllerTag, 0, false);//ERROR callback
		SetActorAngle(ControllerTag, 0);
		delay(35);
	}
}



script "brokenDoor" (int tag){
	if(random(0, 4)==4){
		Generic_Door(tag, 16, 0, 34, 0 );
	} else {
		Ceiling_RaiseByValue(tag, 16, random(8, 32));
		delay(random(15, 35));
		PrintBold(s:"Door malfunction\nTry again");
		Ceiling_LowerToFloor(tag, 16);
		delay(random(15, 35));
	}
}

script "TeleportHellFluence" (int tid){
	AmbientSound("world/hell_influence",1.0 );
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	FadeTo (0, 0, 0, 1.0, 1.0 );
	Radius_Quake2 (0, 6, 35*6, 0, 64, "world/pumm");
	delay(35*1);
	Thing_Move (0, tid, true);
	delay(35*3);
	FadeTo (0, 0, 0, 0.0, 2.0 );
	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
}


script "DeactivateBrokenLamp1"(int tid, int sectorTAG, int tics, int interval){
	if(!tics){ tics = 35;}
	if(!interval){ interval = 3;}
	while (tics){
		if(random(0,1)){
			Thing_Activate(tid);
			ChangeFloor(sectorTAG, "CLT1");
		} else {
			ChangeFloor(sectorTAG, "CLT1N");
			Thing_DeActivate(tid);
		}
		delay(random(1, interval));
		tics --;
	}
	Thing_DeActivate(tid);
	ChangeFloor(sectorTAG, "CLT1N");
}
script "DeactivateBrokenLamp2"(int tid, int sectorTAG, int tics, int interval){
	if(!tics){ tics = 35;}
	if(!interval){ interval = 3;}
	while (tics){
		if(random(0,1)){
			Thing_Activate(tid);
			ChangeCeiling(sectorTAG, "CLT0");
		} else {
			ChangeCeiling(sectorTAG, "CLT0N");
			Thing_DeActivate(tid);
		}
		delay(random(1, interval));
		tics --;
	}
	Thing_DeActivate(tid);
	ChangeCeiling(sectorTAG, "CLT0N");
}
script "ActivateBrokenLamp2"(int tid, int sectorTAG, int tics, int interval){
	if(!tics){ tics = 35;}
	if(!interval){ interval = 3;}
	while (tics){
		if(random(0,1)){
			Thing_Activate(tid);
			ChangeCeiling(sectorTAG, "CLT0");
		} else {
			ChangeCeiling(sectorTAG, "CLT0N");
			Thing_DeActivate(tid);
		}
		delay(random(1, interval));
		tics --;
	}
	Thing_Activate(tid);
	ChangeCeiling(sectorTAG, "CLT0");
}

script "ThingDeactivateBroken" (int tid, int tics, int interval){
	if(!tics){ tics = 35;}
	if(!interval){ interval = 3;}
	while (tics){
		if(random(0,1)){ Thing_Activate(tid);} else {Thing_DeActivate(tid);}
		delay(random(1, interval));
		tics --;
	}
	Thing_DeActivate(tid);
}
script "ThingActivateBroken" (int tid, int tics, int interval){
	if(!tics){ tics = 35;}
	if(!interval){ interval = 3;}
	while (tics){
		if(random(0,1)){ Thing_Activate(tid);} else {Thing_DeActivate(tid);}
		delay(random(1, interval));
		tics --;
	}
	Thing_Activate(tid);
}
script "LookAt" (int CameraTid, int TimeTics){
	ExternalCamera = true;
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	Thing_Activate(CameraTid);
	ChangeCamera(CameraTid, 0, 0);
	ACS_NamedExecuteAlways("FadeOutMusicFast", 0);
	PlaySound (0, "LOOKAT" , 64, 1.0, false, ATTN_NONE);
	delay(TimeTics);
	Thing_DeActivate(CameraTid);
	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	ChangeCamera(0, 0, 0);
	ACS_NamedExecuteAlways("FadeInMusicFast", 0);
	ExternalCamera = false;
}
function bool DoorClosed(int Tid){
	if(GetSectorCeilingZ(Tid, 0, 0)==GetSectorFloorZ(Tid, 0 ,0)){
		return true;
	}
	return false;
}

script "AirlockControlOutflow"(int ThisTid){
	//this called by AirlockAirflow actor to get state of his door
	//air must not to flow if door is closed
	if(DoorClosed(ThisTid)){
		SetResultValue(0);
		terminate;
	}
	SetResultValue(1);
}
script "EnterAirlock" (void){PlayerInAirlock = true;}
script "EnterVaquum" (void){PlayerInAirlock = FALSE;}

script "AirlockInnerDoor" (int thisTid, int OutTid, int ControllerTag){

	if(!DoorClosed(thisTid) || !DoorClosed(OutTid) || CheckActorProperty(ControllerTag, APROP_Alpha, 0.0)  ){
		PlaySound(0, "world/cp_deny", CHAN_AUTO, 1.0,  false, ATTN_NORM );
		delay(35);
		terminate;
	}
	PlaySound(0, "world/cp_ok", CHAN_AUTO, 1.0,  false, ATTN_NORM );
	delay(35);
	Generic_Door(thisTid, 16, 0, 34, 0 );
	SetLineTexture(thisTid, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
	SetLineTexture(OutTid, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
	PlayerInVaquum = 0;
	delay(5);//wait for door start open. AirlockAirflow actor need it/
	ACS_NamedExecute("OxygenRegen",0, 5);
	Thing_Activate(thisTid);//activates air inflow, normal lights
	Thing_DeActivate(OutTid);//deactivates air outflow, red lights
	while(!DoorClosed(thisTid)){

		delay(5);
	}
	SetLineTexture(thisTid, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
	SetLineTexture(OutTid, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
}



script "AirlockOuterDoor" (int thisTid, int InTid, int ControllerTag){
	if(!DoorClosed(thisTid) || !DoorClosed(InTid) || CheckActorProperty(ControllerTag, APROP_Alpha, 0.0) ){
		PlaySound(0, "world/cp_deny", CHAN_AUTO, 1.0,  false, ATTN_NORM );
		delay(35);
		terminate;
	}
	PlaySound(0, "world/cp_ok", CHAN_AUTO, 1.0,  false, ATTN_NORM );
	delay(35);
	Generic_Door(thisTid, 16, 0, 34, 0 );
	SetLineTexture(thisTid, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
	SetLineTexture(InTid, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
	delay(5);
	ACS_NamedExecute("OxygenDrain", 0, 1);

	Thing_Activate(thisTid);//air outflow and redLights
	Thing_DeActivate(InTid);//deactivates air inflow and normal lights
	Delay(15);
	//PlayerInVaquum = 1;
	while(!DoorClosed(thisTid)){
		delay(1);
	}
	SetActorState(ControllerTag, "Lock");//Controller thing turn on airflow from ceiling and goes to "Lock" state
	delay(35*5);//wait for air comes to room
	SetActorState(ControllerTag, "Spawn");
	Thing_Activate(InTid);//activates normal lights and air inflow
	Thing_DeActivate(thisTid);//deactivates air outflow and red lights
	SetLineTexture(thisTid, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
	SetLineTexture(InTid, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
	if(PlayerInAirlock){
		ACS_NamedExecute("OxygenRegen",0, 5);
	}
	//PlayerInVaquum = 0;
}

bool HellThunderPaused = false;
SCRIPT "HellThunder" (void)
{
	if(!HellThunderPaused){

	PlaySound(1206, "world/Thunder1", CHAN_BODY, 0.7, false, ATTN_NONE);
	Thing_Activate(100);
	Delay(random(5,10));
	Thing_Deactivate(100);
	Delay(random(5,10));
	Thing_Activate(100);
	Delay(random(5,10));
	Thing_Deactivate(100);
	Delay(random(5,10));
	Thing_Activate(100);
	Delay(random(5,10));
	Thing_Deactivate(100);
	}

}
script "CreepySounds" (void)
{
	While(TRUE)
	{
	AmbientSound("CREEPYTILE",127);
	Delay(35*random(10,20));
	}
}

SCRIPT "SlideDoor" (int pilyID, int dist, int angle)
{
	if(!dist){dist=128;}

Polyobj_DoorSlide(pilyID, 16, angle, dist, 35*2);
SoundSequenceOnPolyobj (pilyID, "DoorHell");

}
SCRIPT "RotateDoorLeft" (int pilyID, int speed, int angle)
{
if(speed==0){speed=16;}
Polyobj_RotateLeft(pilyID, speed, angle);
SoundSequenceOnPolyobj (pilyID, "DoorHell");
delay(35*5);
Polyobj_RotateRight(pilyID, speed, angle);
SoundSequenceOnPolyobj (pilyID, "DoorHell");

}
SCRIPT "RotateDoorRight" (int pilyID, int speed, int angle)
{
if(speed==0){speed=16;}
Polyobj_RotateRight(pilyID, speed, angle);
SoundSequenceOnPolyobj (pilyID, "DoorHell");
delay(35*5);
Polyobj_RotateLeft(pilyID, speed, angle);
SoundSequenceOnPolyobj (pilyID, "DoorHell");

}
SCRIPT "RotateDoorLeftNoReturn" (int pilyID, int speed, int angle)
{
if(speed==0){speed=16;}
Polyobj_RotateLeft(pilyID, speed, angle);
SoundSequenceOnPolyobj (pilyID, "DoorHell");
}
SCRIPT "RotateDoorRightNoReturn" (int pilyID, int speed, int angle)
{
if(speed==0){speed=16;}
Polyobj_RotateRight(pilyID, speed, angle);
SoundSequenceOnPolyobj (pilyID, "DoorHell");
}


SCRIPT "DSCplatformLowerWaitRaize" (int tag, int height, int wait){

	if(!wait){wait=3;}
	Line_SetBlocking (tag, BLOCKF_CREATURES, 0);
	Ceiling_LowerByValue(tag, 16, height);
	Floor_LowerByValue(tag, 16, height);
	delay(height/16*35/5);
	Line_SetBlocking (tag, 0, BLOCKF_CREATURES);
	delay(35*wait);
	Ceiling_RaiseByValue(tag, 16, height);
	Floor_RaiseByValue(tag, 16, height);
	delay(35*wait+height/16);

	delay(35);

}
SCRIPT "DSCplatformLowerWaitRaize2" (int tag, int height, int wait){
	if(!wait){wait=3;}
	SetLineTexture(tag, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
	PlaySound(tag, "world/cp_ok", CHAN_AUTO, 1.0,  false, ATTN_NORM );
	Line_SetBlocking (tag, BLOCKF_CREATURES, 0);
	delay(35);
	Ceiling_LowerByValue(tag, 16, height);
	Floor_LowerByValue(tag, 16, height);
	delay(height/2);
	Line_SetBlocking (tag, 0, BLOCKF_CREATURES);
	delay(35*wait);
	Line_SetBlocking (tag, BLOCKF_CREATURES, 0);
	Ceiling_RaiseByValue(tag, 16, height);
	Floor_RaiseByValue(tag, 16, height);
	delay(height/2);
	Line_SetBlocking (tag, 0, BLOCKF_CREATURES);
	delay(35);
	SetLineTexture(tag, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
}



SCRIPT "DSCfloatRock" (int tag, int height, int speed){

	if(!speed){speed=16;}
	Ceiling_LowerByValue(tag, speed, height);
	Floor_LowerByValue(tag, speed, height);
	delay(height/speed*35/4);
	delay(15);
	Ceiling_RaiseByValue(tag, speed, height);
	Floor_RaiseByValue(tag, speed, height);
	delay(height/speed*35/4);
	delay(35);
	ACS_NamedExecuteAlways("DSCfloatRock", 0, tag, height, speed);
}

SCRIPT "FadeOutMusic" (void){
	int vol = 1.0;
	for (int counter = 0; counter < 100; counter++)
	{
		vol = vol-0.01;
		SetMusicVolume(vol);
		delay(1);
	}
	SetMusicVolume(0.0);
}
SCRIPT "FadeInMusic" (void){
	int vol = 0.0;
	for (int counter = 0; counter < 100; counter++)
	{
		vol = vol+0.01;
		SetMusicVolume(vol);
		delay(1);
	}
	SetMusicVolume(1.0);
}

SCRIPT "FadeOutMusicFast" (void){
	int vol = 1.0;
	for (int counter = 0; counter < 100; counter++)
	{
		vol = vol-0.05;
		SetMusicVolume(vol);
		delay(1);
	}
	SetMusicVolume(0.0);
}
SCRIPT "FadeInMusicFast" (void){
	int vol = 0.0;
	for (int counter = 0; counter < 100; counter++)
	{
		vol = vol+0.05;
		SetMusicVolume(vol);
		delay(1);
	}
	SetMusicVolume(1.0);
}

SCRIPT "MuteMusic" (int ticks){
	SetMusicVolume(0.0);
		delay(ticks);
	SetMusicVolume(1.0);
}


SCRIPT "Halos" ENTER
{

	ACS_NamedExecuteAlways("SetBigFireHalo",0, 777);

}

SCRIPT "SpawnTeleport" (int selfTid, int targetTid){
	SpawnSpotFacingForced ("DSCportalToMap", selfTid, selfTid*targetTid*10);
	SetThingSpecial(selfTid*targetTid*10, ACS_NamedExecuteAlways, "ActivateTeleport", selfTid, targetTid);
}
SCRIPT "ActivateTeleport" (int selfTid, int targetTid){
	printBold(s:"asdasd");
	Teleport (targetTid, 0, false);
	SpawnSpotFacingForced ("DSCportalToMap", selfTid, selfTid*targetTid*10);
	SetThingSpecial(selfTid*targetTid*10, ACS_NamedExecuteAlways, "ActivateTeleport", selfTid, targetTid);
}



script "SetHalo" (int tid){
	if(CheckSight (0, tid, "") ){
		HudMessageOnActor(tid, 0, 0, 0, 0, 0, 2048, "HALSA0", "", 1.0 / 35 + 1, 0);
	}
	delay(1);
	restart;
}

script "SetBigFireHalo" (int tid){

	if(CheckSight (0, tid, "") ){
		HudMessageOnActor(tid, 0, 0, 0, 0, 0, 4096, "B1FHA0", "", 1.0 / 35 + 1, 0);
	}
	delay(1);
	restart;
}

script "DisplayActorHealth" (int tid){

	if(CheckSight (0, tid, "") ){
		HudMessageOnActor(tid, 0, 0, 0, 0, -64, 1024, -1, "Health: ", 1.0 / 35 + 1, 0);
	}
	//+GetActorProperty(tid, APROP_Health)
	delay(1);
	restart;
}








//////////////////////////////////////////////////////////////////////////////////////////////
// This determines how much the player has normally while on ground.
// If your map/mod gives player more air supply, edit this constant
// and recompile the script.

#define max_oxygenInSec 60*2
#define max_oxygen 35 * max_oxygenInSec
#define oxy_regen 35*60
bool MaskSoundStarted = false;
bool maskOFF = true;

Script "MaskRestartControll" ENTER {
	//restarts rebreather sound for batle sounds do not stop it
	if(MaskSoundStarted && PlayerInVaquum){
		PlaySound(0, "player/Rebreather", CHAN_BODY, 1.0,  true, ATTN_NONE );
	}
	Delay(90);
	restart;
}
Script "MaskControll" ENTER {
	if(!MaskSoundStarted && PlayerInVaquum){
		PlaySound(0, "player/Rebreather", CHAN_BODY, 1.0,  true, ATTN_NONE );
		MaskSoundStarted = true;
		maskOFF = false;
	}
	if(!PlayerInVaquum && !maskOFF){
		PlaySound(0, "player/Maskoff", CHAN_BODY, 1.0,  false, 0 );
		MaskSoundStarted = false;
		maskOFF = true;
	}
	Delay(10);
	Restart;
}

Script "OxygenDrain" (int DrainSpeedInSec)
{
	PlayerInVaquum = true;
	ACS_NamedTerminate("OxygenRegen",0);
	if (CheckInventory("Oxygen") > 0)
	{
		TakeInventory("Oxygen",DrainSpeedInSec * 35);
		ACS_NamedExecute("DisplayOxygenInSec", 0);

	}
	else
	{
		Thing_Damage(0,5,MOD_WATER);
	}
	Delay(35);
	Restart;
}

script "DisplayOxygenInSec" (void)
{
	if(CheckInventory("Oxygen")< max_oxygen){
		//PrintBold(s:"Oxygen ", d:CheckInventory("Oxygen") / 35, s:" Seconds");
		SetHudSize(400, 300, 0);
		hudmessageBold(s:"Oxygen ", d:CheckInventory("Oxygen") / 35, s:" Seconds"; HUDMSG_PLAIN , 0, CR_WHITE, 350.0, 250.0, 1.0);
		Delay(1);
	} else {
		PrintBold(s:"Oxygen full");
	}
}

script "OxygenRegen" (int RegenSpeedInSec)
{
	PlayerInVaquum = false;
	ACS_NamedTerminate("OxygenDrain",0);
	if(CheckInventory("Oxygen") >= oxy_regen)
	{
		Terminate;
	}
	else
	{
		GiveInventory("Oxygen",RegenSpeedInSec * 35);
	}
	//ACS_NamedExecute("MaskControll", 0, 0);
	Delay(35);
	Restart;
}

script "slideTECdoor" (int po, int angle, int dist) {

	Polyobj_Move(po, 16, angle, dist);
	SoundSequenceOnPolyObj(po, "Reshotka");
	delay((dist/2)+35);
	Polyobj_Move(po, 16, angle+128, dist);
	SoundSequenceOnPolyObj(po, "Reshotka");
	delay(dist/2);
}


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////


//Original code by Isle
function void HudMessageOnActor(int tid, int msgID, int hudX, int hudY, int xOffset, int yOffset, int range, str sprite, str text, int holdTime, str colour)
{

	int dist, angle, vang, pitch, x, y;

	if (holdTime == 0) { holdTime = 0.1; }
	if (hudX == 0) { hudX = 640; }
	if (hudY == 0) { hudY = 480; }

	if(sprite != -1)
	{

		//SetFont(sprite);
		//text = "A";

	}

	SetHudSize(hudX, hudY, 1);
	x = GetActorX(tid) - GetActorX(0);
	y = GetActorY(tid) - GetActorY(0);

	vang = VectorAngle(x,y);
	angle = (vang - GetActorAngle(0) + 1.0) % 1.0;

	if(((vang+0.125)%0.5) > 0.25) dist = FixedDiv(y, sin(vang));
	else dist = FixedDiv(x, cos(vang));

	if ((angle < 0.23 || angle > 0.85) && (dist >> 16) < range)
	{

		if (GetActorPitch(0) >= -0.5 && GetActorPitch(0) <= 0.5)
		{

			pitch = VectorAngle(dist, GetActorZ(tid) - (GetActorZ(0) + GetActorViewHeight(0)));
			pitch += FixedMul(GetActorPitch(0), 1.2) % 1.0;

			if ((hudX/2) * sin(angle) != 0 && cos(angle) != 0 && (hudX/2) * sin(pitch) != 0 && cos(pitch) != 0)
			{

				x = hudX/2 - ((hudX/2) * sin(angle) / cos(angle));
				y = hudY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));

				x+=xOffset;
				y+=yOffset;

				HudMessage(s:text; HUDMSG_PLAIN, msgID, colour, (x << 16), (y << 16), holdTime);

			}

		}

	}

}

script "Thing_Activate" (int tid){ Thing_Activate(tid); }
script "Thing_DeActivate" (int tid){ Thing_DeActivate(tid); }

bool demogliphStarted;

script "PressUse" (void){
	if(!demogliphStarted){
		SetHudSize(640, 480, 0);
		SetActivator (0);
		HudMessageBold(	s:"Press USE";	HUDMSG_PLAIN, 13131317, CR_RED, 320.0, 200.0, 0.1);
	}
}



script "DemogliphStarted" (void) {
	if(demogliphStarted){ SetResultValue(1);} else {SetResultValue(0);}
}


SCRIPT "DemoMap" (int CamTID){
	ExternalCamera = true;
	SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
	AmbientSound("world/lookat3", 1.0);
	FadeTo (0, 0, 0, 1.0, 1.5 );
	ACS_NamedExecuteAlways("Mus_DTEMPLE", 0);
	delay(35+17);
	Thing_Activate(CamTID);
	ChangeCamera(CamTID, 0 , 0);
	FadeTo (0, 0, 0, 0.0, 1.5 );

	while (TRUE) {
		delay(1);
			HudMessage(s:"";HUDMSG_PLAIN,776,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));
			HudMessage(s:"";HUDMSG_PLAIN,777,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));
			HudMessage(s:"";HUDMSG_PLAIN,778,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));
			HudMessage(s:"";HUDMSG_PLAIN,779,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));
			HudMessage(s:"";HUDMSG_PLAIN,780,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));

		if(GetPlayerInput(-1, INPUT_BUTTONS)){ break;}
	}
	ACS_NamedExecuteAlways("RestoreMusic", 0);
	FadeTo (0, 0, 0, 1.0, 1.5 );
	delay(35+17);

	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	ChangeCamera(0, 0 , 0);
	FadeTo (0, 0, 0, 0.0, 1.5 );
	delay(35);
	ExternalCamera = false;

}



SCRIPT "DemoGliph" (int CamTID, int CovenID){
	SetActivator (0);
	if(WaveOnline){ Terminate;}
	if(!CamTID){CamTID=2200;}
	if(!CovenID){CovenID=0;}
	delay(2);
	Thing_Activate(CamTID);
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	AmbientSound("world/lookat3", 1.0);
	FadeTo (0, 0, 0, 1.0, 1.5 );
	ACS_NamedExecuteAlways("Mus_DTEMPLE", 0);
	delay(35+17);
	demogliphStarted = true;

		SetHudSize(320, 240, 0);
		SetFont("DSCscrsh");
		HudMessage(	s:"A";	HUDMSG_PLAIN, 13131315, CR_DARKRED, 160.0, 120.0, 3.0);

	ChangeCamera(CamTID, 0 , 0);
	FadeTo (0, 0, 0, 0.0, 1.5 );
	delay(35*3);

	while (TRUE) {
		delay(1);

		SetHudSize(320, 240, 0);
		SetFont("DSCscrsh");
		HudMessage(	s:"A";	HUDMSG_PLAIN, 13131315, CR_DARKRED, 160.0, 120.0, 0.1);

		switch (CovenID) {
			case 1:
				ACS_NamedExecuteAlways("Covenant1", 0, 0, 0, 0); break;
			case 2:
				ACS_NamedExecuteAlways("Covenant2", 0, 0, 0, 0); break;
			case 3:
				ACS_NamedExecuteAlways("Covenant3", 0, 0, 0, 0); break;
			case 4:
				ACS_NamedExecuteAlways("Covenant4", 0, 0, 0, 0); break;
			case 5:
				ACS_NamedExecuteAlways("Covenant5", 0, 0, 0, 0); break;
			default:
				ACS_NamedExecuteAlways("Covenant", 0, 0, 0, 0);

		}


		if(GetPlayerInput(0, INPUT_BUTTONS)){ break;}
	}
	ACS_NamedExecuteAlways("RestoreMusic", 0);
	FadeTo (0, 0, 0, 1.0, 1.5 );
	delay(35+17);
	demogliphStarted = false;
	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	ChangeCamera(0, 0 , 0);
	FadeTo (0, 0, 0, 0.0, 1.5 );
	hudmessageBold(s:" "; HUDMSG_PLAIN , 0, CR_RED, 1.5, 0.95, 1.0);
	delay(35);


}




function void Pause (void)
{
If(GameType() == 0)
{
GiveInventory("TotalTimeFreezer",1);
SetPlayerProperty(1,1,PROP_TOTALLYFROZEN);
}
}

function void UnPause (void)
{
If(GameType() == 0)
{
TakeInventory("TotalTimeFreezer",1);
SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);
}
}



SCRIPT "LevelEndingMessage" (int sec){

	if(MapEndText){PrintBold(s:MapEndText,d:sec,s:" seconds");Terminate;}
	str Text;
	switch (random(1, 10)) {
		case 1:
			Text = StrParam(l:"MAP_ENDING_TEXT1");
			break;
		case 2:
			Text = StrParam(l:"MAP_ENDING_TEXT2");
			break;
		case 3:
			Text = StrParam(l:"MAP_ENDING_TEXT3");
			break;
		case 4:
			Text = StrParam(l:"MAP_ENDING_TEXT4");
			break;
		case 5:
			Text = StrParam(l:"MAP_ENDING_TEXT5");
			break;
		case 6:
			Text = StrParam(l:"MAP_ENDING_TEXT6");
			break;
		case 7:
			Text = StrParam(l:"MAP_ENDING_TEXT7");
			break;
		case 8:
			Text = StrParam(l:"MAP_ENDING_TEXT8");
			break;
		case 9:
			Text = StrParam(l:"MAP_ENDING_TEXT9");
			break;
		case 10:
			Text = StrParam(l:"MAP_ENDING_TEXT10");
			break;

	}
	MapEndText = Text;
	PrintBold(s:Text,d:sec,s:" seconds");
}

