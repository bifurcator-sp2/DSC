#library "DSCLIB01"
#include "zcommon.acs"

str MapEndText;
bool ExternalCamera;
bool WaveOnline      = false;
bool PlayerInVaquum  = false;
bool PlayerInAirlock = true;
int maxWaveCount     = 50;

global int 1:AmmoMaxRnd;
global int 2:WeaponGotID;
global int 3:CurrentWave;
global int 4:TotalKills;
global bool 5:Atrium1Active;
global int 6:MonsterCountMethod;
global int 7:DSCplayerRank;
global int 8:GlobalAttempt;//iteration of hell

#define shotGunSpawnProgressInPercent 3
#define SSGSpawnProgressInPercent 15
#define ChaingunSpawnProgressInPercent 30
#define RLSpawnProgressInPercent 50
#define PlasmaGunSpawnProgressInPercent 70
#define BFG9000SpawnProgressInPercent 80

bool isBE = false;
bool NextWaveReady = false;

bool IgnoreWaveMusicChange = false;
bool restoreMusicAfterWave = true;
int SpawnedMonstersOnTheMap = 0;
int DSCscreenFade = 0;//for DSCranks
bool waitForWeaponSpawnedMassage = false;
bool waitForScullSpawnedMassage = false;
int KilledWaveStart = 0;
int killedPerWave = 0;
bool LastWave = false;//indicator for DoomSlayerGliph spawn
int WaveDelay = 350;//time of wave spawn with iterations

bool NOspawn = false; //dev staff

int SaintHealthUpMultipler = 0; //current health up for Zscript for DSCprisonedSaint
int SaintHealthUpBaseAmount = 10;//basic value for SaintHealthUp DSCprisonedSaint

bool OverrideDeathBugFIX = false;

#define DSCbaseHealthBonus 15
#define AIDhealthRecallBaseTime 156
#define AmmoRecallBaseTime 156
#define AbsorbHealthAmount 5
#define StrongHoldChance 10
#define berserkBonusChance 2
#define invisBonusChance 2
#define PowerTimeFreezerChance 2
#define invuBonusChance 3

//#define StrongHoldChance 10
//#define berserkBonusChance 5
//#define invisBonusChance 5
//#define invuBonusChance 5

int AchiveKillInSEc1 = 0;
int AchiveDieInSec1 = 0;
int AchiveKillInSEc10 = 0;
bool RankMenueOnScreen = false;
int OldPlayerHealth;

//
// COMMON
//

script "ResetControl" enter {
    //log(s:"log");
    if ( GetUserCVar(0, "dsc_restore_defaults") == true ){

        SetUserCVar(0, "dsc_restore_defaults", false);
        SetUserCVar(0, "dsc_spawn_factor", 2.0);
        SetUserCVar(0, "dsc_heroic_mode", false);
        SetUserCVar(0, "dpwh_filmictonemap", true);
        SetUserCVar(0, "dpwh_chromaticAberration", true);
        SetUserCVar(0, "dpwh_naturalVignette", false);
    }

    delay(1);
    restart;
}

script "enterfade" enter {

    //MapEndText = StrParam(l:"MAP_ENDING_TEXT");
    Autosave();
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);

    delay(1);
    SetMusicVolume(0.0);
    FadeTo(0, 0, 0, 1.0, 0.0 );

    for ( int i = 0; i<=9; i++ ){

        SoundVolume (0, i, 0.0);
    }
}
int totalsound=0;

script "enterSOUNDin" enter {

    delay(15);

    Floor_LowerToLowest(171717, 10000);
    SoundSequenceOnSector(171717, "___", 0);
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);

    while ( totalsound < 100 ){

        for ( int i = 0; i<=128; i++ ){

            SoundVolume (0, i, FixedDiv(totalsound, 100));
        }

        SetMusicVolume(FixedDiv(totalsound, 100));
        totalsound++;
        delay(2);
    }

    for ( i = 0; i<=128; i++ ){

        SoundVolume (0, i, 1.0);
    }

    SetMusicVolume(1.0);
}

script "enterfadein" enter {

    delay(15);
    FadeTo (0, 0, 0, 0.0, 5.0 );
}

function int GetFn(int offset){

    if ( offset <= 2 ){

        return	offset;
    }

    return GetFn( offset - 1 ) + GetFn( offset - 2 );
    //return (offset <= 2) ? offset : GetFn(offset - 1) + GetFn(offset - 2);
}

script "SequenceSwitch" (int ControllerTag, int length, int offset){
    //CallbackScript is numbered by ControllerTag
    //ErrorCallbackScript is numbered by BadResultTag
    //offset button offset

    PlaySound( 0, "world/cp_ok", CHAN_AUTO, 1.0,  false, ATTN_NORM );

    delay(35);
    int curOffset = GetActorAngle(ControllerTag);
    int value = GetActorZ(ControllerTag);//  number of curOffset

    SetActorAngle(ControllerTag, GetActorAngle(ControllerTag)+1);//curOffset ++

    if ( curOffset == 0 ){

        if ( offset==1 ){

            SetActorPosition(ControllerTag, GetActorX(ControllerTag), GetActorY(ControllerTag), 1, 0);
        }

        terminate;
    }

    //PrintBold(i:curOffset, s:" ", i:offset);

    if ( curOffset == value ){

        if ( curOffset == length-1 ){

            ACS_Execute(ControllerTag, 0, true);//callback
            terminate;
        }
        //good sequence

        SetActorPosition(ControllerTag, GetActorX(ControllerTag), GetActorY(ControllerTag), offset, 0);
    }

    if (curOffset == length-1 ){

        ACS_Execute(ControllerTag, 0, false);//ERROR callback
        SetActorAngle(ControllerTag, 0);
        delay(35);
    }
}

script "brokenDoor" (int tag){

    if ( random(0, 4) == 4 ){

        Generic_Door(tag, 16, 0, 34, 0 );

    } else {

        Ceiling_RaiseByValue(tag, 16, random(8, 32));

        delay(random(15, 35));
        PrintBold(s:"Door malfunction\nTry again");
        Ceiling_LowerToFloor(tag, 16);
        delay(random(15, 35));
    }
}

script "TeleportHellFluence" (int tid){

    AmbientSound("world/hell_influence", 1.0 );
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    FadeTo(0, 0, 0, 1.0, 1.0 );
    Radius_Quake2 (0, 6, 35*6, 0, 64, "world/pumm");

    delay(35*1);
    Thing_Move (0, tid, true);

    delay(35*3);
    FadeTo(0, 0, 0, 0.0, 2.0 );
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
}

script "DeactivateBrokenLamp1"(int tid, int sectorTAG, int tics, int interval){

    if ( !tics ){ tics = 35; }

    if ( !interval ){ interval = 3; }

    while ( tics ){

        if ( random(0,1) ){

            Thing_Activate(tid);
            ChangeFloor(sectorTAG, "CLT1");

        } else {

            ChangeFloor(sectorTAG, "CLT1N");
            Thing_DeActivate(tid);
        }

        delay( random(1, interval) );
        tics--;
    }

    Thing_DeActivate(tid);
    ChangeFloor(sectorTAG, "CLT1N");
}

script "DeactivateBrokenLamp2"(int tid, int sectorTAG, int tics, int interval){

    if ( !tics ){ tics = 35;}

    if ( !interval ){ interval = 3; }

    while ( tics ){

        if ( random(0,1) ){

            Thing_Activate(tid);
            ChangeCeiling(sectorTAG, "CLT0");

        } else {

            ChangeCeiling(sectorTAG, "CLT0N");
            Thing_DeActivate(tid);
        }

        delay( random(1, interval) );
        tics--;
    }

    Thing_DeActivate(tid);
    ChangeCeiling(sectorTAG, "CLT0N");
}

script "ActivateBrokenLamp2"(int tid, int sectorTAG, int tics, int interval){

    if ( !tics ){ tics = 35; }

    if ( !interval ){ interval = 3; }

    while ( tics ){

        if ( random(0,1) ){

            Thing_Activate(tid);
            ChangeCeiling(sectorTAG, "CLT0");

        } else {

            ChangeCeiling(sectorTAG, "CLT0N");
            Thing_DeActivate(tid);
        }

        delay( random(1, interval) );
        tics--;
    }

    Thing_Activate(tid);
    ChangeCeiling(sectorTAG, "CLT0");
}

script "ThingDeactivateBroken" (int tid, int tics, int interval){

    if ( !tics ){ tics = 35; }

    if ( !interval ){ interval = 3; }

    while ( tics ){

        if ( random(0,1) ){ Thing_Activate(tid); } else { Thing_DeActivate(tid); }

        delay( random(1, interval) );
        tics--;
    }

    Thing_DeActivate(tid);
}

script "ThingActivateBroken" (int tid, int tics, int interval){

    if ( !tics ){ tics = 35; }

    if ( !interval ){ interval = 3; }

    while ( tics ){

        if ( random(0,1) ){ Thing_Activate(tid); } else { Thing_DeActivate(tid); }

        delay( random(1, interval) );
        tics --;
    }

    Thing_Activate(tid);
}

script "LookAt" (int CameraTid, int TimeTics){

    ExternalCamera = true;
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    Thing_Activate(CameraTid);
    ChangeCamera(CameraTid, 0, 0);
    ACS_NamedExecuteAlways("FadeOutMusicFast", 0);
    PlaySound (0, "LOOKAT" , 64, 1.0, false, ATTN_NONE);

    delay(TimeTics);
    Thing_DeActivate(CameraTid);
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
    ChangeCamera(0, 0, 0);
    ACS_NamedExecuteAlways("FadeInMusicFast", 0);
    ExternalCamera = false;
}

function bool DoorClosed(int Tid){

    if ( GetSectorCeilingZ(Tid, 0, 0) == GetSectorFloorZ(Tid, 0, 0) ){

        return true;
    }

    return false;
}

script "AirlockControlOutflow"(int ThisTid){
    //this called by AirlockAirflow actor to get state of his door
    //air must not to flow if door is closed
    if ( DoorClosed(ThisTid) ){

        SetResultValue(0);
        terminate;
    }

    SetResultValue(1);
}

script "EnterAirlock" (void){ PlayerInAirlock = true; }

script "EnterVaquum" (void){ PlayerInAirlock = false; }

script "AirlockInnerDoor" (int thisTid, int OutTid, int ControllerTag){

    if (
            !DoorClosed(thisTid) ||
            !DoorClosed(OutTid) ||
            CheckActorProperty(ControllerTag, APROP_Alpha, 0.0)
        ){

        PlaySound(0, "world/cp_deny", CHAN_AUTO, 1.0,  false, ATTN_NORM );

        delay(35);
        terminate;
    }

    PlaySound(0, "world/cp_ok", CHAN_AUTO, 1.0,  false, ATTN_NORM );

    delay(35);
    Generic_Door(thisTid, 16, 0, 34, 0 );
    SetLineTexture(thisTid, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
    SetLineTexture(OutTid, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
    PlayerInVaquum = 0;

    delay(5);//wait for door start open. AirlockAirflow actor need it/
    ACS_NamedExecute("OxygenRegen",0, 5);
    Thing_Activate(thisTid);//activates air inflow, normal lights
    Thing_DeActivate(OutTid);//deactivates air outflow, red lights

    while ( !DoorClosed(thisTid) ){

        delay(5);
    }

    SetLineTexture(thisTid, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
    SetLineTexture(OutTid, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
}

script "AirlockOuterDoor" (int thisTid, int InTid, int ControllerTag){

    if (
            !DoorClosed(thisTid) ||
            !DoorClosed(InTid) ||
            CheckActorProperty(ControllerTag, APROP_Alpha, 0.0)
        ){

        PlaySound(0, "world/cp_deny", CHAN_AUTO, 1.0,  false, ATTN_NORM );
        delay(35);
        terminate;
    }

    PlaySound(0, "world/cp_ok", CHAN_AUTO, 1.0,  false, ATTN_NORM );

    delay(35);
    Generic_Door(thisTid, 16, 0, 34, 0 );
    SetLineTexture(thisTid, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
    SetLineTexture(InTid, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");

    delay(5);
    ACS_NamedExecute("OxygenDrain", 0, 1);

    Thing_Activate(thisTid);//air outflow and redLights
    Thing_DeActivate(InTid);//deactivates air inflow and normal lights

    delay(15);
    //PlayerInVaquum = 1;

    while(!DoorClosed(thisTid)){ delay(1); }

    SetActorState(ControllerTag, "Lock");//Controller thing turn on airflow from ceiling and goes to "Lock" state

    delay(35*5);//wait for air comes to room
    SetActorState(ControllerTag, "Spawn");
    Thing_Activate(InTid);//activates normal lights and air inflow
    Thing_DeActivate(thisTid);//deactivates air outflow and red lights
    SetLineTexture(thisTid, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
    SetLineTexture(InTid, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");

    if ( PlayerInAirlock ){

        ACS_NamedExecute("OxygenRegen",0, 5);
    }
    //PlayerInVaquum = 0;
}

bool HellThunderPaused = false;

script "HellThunder" (void){

    if ( !HellThunderPaused ){

	PlaySound(1206, "world/Thunder1", CHAN_BODY, 0.7, false, ATTN_NONE);
	Thing_Activate(100);

        delay( random(5,10) );
	Thing_Deactivate(100);

        delay( random(5,10) );
	Thing_Activate(100);

        delay( random(5,10) );
	Thing_Deactivate(100);

        delay( random(5,10) );
	Thing_Activate(100);

        delay( random(5,10) );
	Thing_Deactivate(100);
    }
}

script "CreepySounds" (void){

    while (true){

        AmbientSound("CREEPYTILE",127);
        delay( 35*random(10,20) );
    }
}

script "SlideDoor" (int pilyID, int dist, int angle){

    if ( !dist ){ dist=128; }

    Polyobj_DoorSlide(pilyID, 16, angle, dist, 35*2);
    SoundSequenceOnPolyobj(pilyID, "DoorHell");
}

script "RotateDoorLeft" (int pilyID, int speed, int angle) {

    if ( speed==0 ){ speed=16; }

    Polyobj_RotateLeft(pilyID, speed, angle);
    SoundSequenceOnPolyobj (pilyID, "DoorHell");

    delay(35*5);
    Polyobj_RotateRight(pilyID, speed, angle);
    SoundSequenceOnPolyobj (pilyID, "DoorHell");
}

script "RotateDoorRight" (int pilyID, int speed, int angle) {

    if ( speed==0 ){ speed=16; }

    Polyobj_RotateRight(pilyID, speed, angle);
    SoundSequenceOnPolyobj (pilyID, "DoorHell");

    delay(35*5);
    Polyobj_RotateLeft(pilyID, speed, angle);
    SoundSequenceOnPolyobj (pilyID, "DoorHell");
}

script "RotateDoorLeftNoReturn" (int pilyID, int speed, int angle){

    if ( speed==0 ){ speed=16; }

    Polyobj_RotateLeft(pilyID, speed, angle);
    SoundSequenceOnPolyobj (pilyID, "DoorHell");
}

script "RotateDoorRightNoReturn" (int pilyID, int speed, int angle){

    if ( speed == 0 ){ speed=16; }

    Polyobj_RotateRight(pilyID, speed, angle);
    SoundSequenceOnPolyobj (pilyID, "DoorHell");
}

script "DSCplatformLowerWaitRaize" (int tag, int height, int wait){

    if ( !wait ){ wait=3; }

    Line_SetBlocking (tag, BLOCKF_CREATURES, 0);
    Ceiling_LowerByValue(tag, 16, height);
    Floor_LowerByValue(tag, 16, height);

    delay(height/16*35/5);
    Line_SetBlocking (tag, 0, BLOCKF_CREATURES);

    delay(35*wait);
    Ceiling_RaiseByValue(tag, 16, height);
    Floor_RaiseByValue(tag, 16, height);

    delay(35*wait+height/16);
    delay(35);
}

script "DSCplatformLowerWaitRaize2" (int tag, int height, int wait){

    if ( !wait ){ wait=3; }

    SetLineTexture(tag, SIDE_FRONT, TEXTURE_BOTTOM, "ZWT1_0");
    PlaySound(tag, "world/cp_ok", CHAN_AUTO, 1.0,  false, ATTN_NORM );
    Line_SetBlocking(tag, BLOCKF_CREATURES, 0);

    delay(35);
    Ceiling_LowerByValue(tag, 16, height);
    Floor_LowerByValue(tag, 16, height);

    delay( height/2 );
    Line_SetBlocking (tag, 0, BLOCKF_CREATURES);

    delay( 35*wait );
    Line_SetBlocking (tag, BLOCKF_CREATURES, 0);
    Ceiling_RaiseByValue(tag, 16, height);
    Floor_RaiseByValue(tag, 16, height);

    delay( height/2 );
    Line_SetBlocking (tag, 0, BLOCKF_CREATURES);

    delay(35);
    SetLineTexture(tag, SIDE_FRONT, TEXTURE_BOTTOM, "SWT1_1");
}

script "DSCfloatRock" (int tag, int height, int speed){

    if ( !speed ){ speed=16; }

    Ceiling_LowerByValue(tag, speed, height);
    Floor_LowerByValue(tag, speed, height);

    delay( height / speed * 35 / 4 );

    delay(15);
    Ceiling_RaiseByValue(tag, speed, height);
    Floor_RaiseByValue(tag, speed, height);

    delay( height / speed * 35 / 4 );

    delay(35);
    ACS_NamedExecuteAlways("DSCfloatRock", 0, tag, height, speed);
}

script "FadeOutMusic" (void){

    int vol = 1.0;

    for ( int counter = 0; counter < 100; counter++){

        vol = vol-0.01;
        SetMusicVolume(vol);
        delay(1);
    }

    SetMusicVolume(0.0);
}

script "FadeInMusic" (void){

    int vol = 0.0;

    for ( int counter = 0; counter < 100; counter++ ){

        vol = vol+0.01;
        SetMusicVolume(vol);
        delay(1);
    }

    SetMusicVolume(1.0);
}

script "FadeOutMusicFast" (void){

    int vol = 1.0;

    for (int counter = 0; counter < 100; counter++){

        vol = vol-0.05;
        SetMusicVolume(vol);
        delay(1);
    }

    SetMusicVolume(0.0);
}

script "FadeInMusicFast" (void){

    int vol = 0.0;

    for (int counter = 0; counter < 100; counter++){

        vol = vol+0.05;
        SetMusicVolume(vol);
        delay(1);
    }

    SetMusicVolume(1.0);
}

script "MuteMusic" (int ticks){

    SetMusicVolume(0.0);

    delay(ticks);
    SetMusicVolume(1.0);
}

script "Halos" enter {

    ACS_NamedExecuteAlways("SetBigFireHalo",0, 777);
}

script "SpawnTeleport" (int selfTid, int targetTid){

    SpawnSpotFacingForced ("DSCportalToMap", selfTid, selfTid*targetTid*10);
    SetThingSpecial(selfTid*targetTid*10, ACS_NamedExecuteAlways, "ActivateTeleport", selfTid, targetTid);
}

script "ActivateTeleport" (int selfTid, int targetTid){

    printBold(s:"asdasd"); // @FIXME:???
    Teleport (targetTid, 0, false);
    SpawnSpotFacingForced ("DSCportalToMap", selfTid, selfTid*targetTid*10);
    SetThingSpecial(selfTid*targetTid*10, ACS_NamedExecuteAlways, "ActivateTeleport", selfTid, targetTid);
}

script "SetHalo" (int tid){

    if ( CheckSight(0, tid, "") ){

        HudMessageOnActor(tid, 0, 0, 0, 0, 0, 2048, "HALSA0", "", 1.0 / 35 + 1, 0);
    }

    delay(1);
    restart;
}

script "SetBigFireHalo" (int tid){

    if ( CheckSight(0, tid, "") ){

        HudMessageOnActor(tid, 0, 0, 0, 0, 0, 4096, "B1FHA0", "", 1.0 / 35 + 1, 0);
    }

    delay(1);
    restart;
}

script "DisplayActorHealth" (int tid){

    if ( CheckSight(0, tid, "") ){

        HudMessageOnActor(tid, 0, 0, 0, 0, -64, 1024, -1, "Health: ", 1.0 / 35 + 1, 0);
    }
    //+GetActorProperty(tid, APROP_Health)
    delay(1);
    restart;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// This determines how much the player has normally while on ground.
// If your map/mod gives player more air supply, edit this constant
// and recompile the script.

#define max_oxygenInSec 60*2
#define max_oxygen 35 * max_oxygenInSec
#define oxy_regen 35*60
bool MaskSoundStarted = false;
bool maskOFF = true;

script "MaskRestartControll" enter {

    //restarts rebreather sound for batle sounds do not stop it
    if ( MaskSoundStarted && PlayerInVaquum ){

        PlaySound(0, "player/Rebreather", CHAN_BODY, 1.0,  true, ATTN_NONE );
    }

    delay(90);
    restart;
}

script "MaskControll" enter {

    if ( !MaskSoundStarted && PlayerInVaquum ){

        PlaySound(0, "player/Rebreather", CHAN_BODY, 1.0,  true, ATTN_NONE );
        MaskSoundStarted = true;
        maskOFF = false;
    }

    if ( !PlayerInVaquum && !maskOFF ){

        PlaySound(0, "player/Maskoff", CHAN_BODY, 1.0,  false, 0 );
        MaskSoundStarted = false;
        maskOFF = true;
    }

    delay(10);
    Restart;
}

script "OxygenDrain" (int DrainSpeedInSec){

    PlayerInVaquum = true;
    ACS_NamedTerminate("OxygenRegen",0);

    if ( CheckInventory("Oxygen") > 0 ){

        TakeInventory("Oxygen",DrainSpeedInSec * 35);
        ACS_NamedExecute("DisplayOxygenInSec", 0);

    } else {

        Thing_Damage(0,5,MOD_WATER);
    }

    delay(35);
    Restart;
}

script "DisplayOxygenInSec" (void){

    if ( CheckInventory("Oxygen")< max_oxygen ){

        //PrintBold(s:"Oxygen ", d:CheckInventory("Oxygen") / 35, s:" Seconds");
        SetHudSize(400, 300, 0);
        hudmessageBold(s:"Oxygen ", d:CheckInventory("Oxygen") / 35, s:" Seconds"; HUDMSG_PLAIN , 0, CR_WHITE, 350.0, 250.0, 1.0);
        delay(1);

    } else {

        PrintBold(s:"Oxygen full");
    }
}

script "OxygenRegen" (int RegenSpeedInSec){

    PlayerInVaquum = false;
    ACS_NamedTerminate("OxygenDrain",0);

    if ( CheckInventory("Oxygen") >= oxy_regen ){

        Terminate;

    } else {

        GiveInventory("Oxygen",RegenSpeedInSec * 35);
    }

    //ACS_NamedExecute("MaskControll", 0, 0);
    delay(35);
    Restart;
}

script "slideTECdoor" (int po, int angle, int dist) {

    Polyobj_Move(po, 16, angle, dist);
    SoundSequenceOnPolyObj(po, "Reshotka");

    delay( (dist/2) + 35 );
    Polyobj_Move(po, 16, angle+128, dist);
    SoundSequenceOnPolyObj(po, "Reshotka");

    delay( dist / 2 );
}

///////////////////////////////////////////////////////////////////////////////////////////////

//Original code by Isle
function void HudMessageOnActor(int tid, int msgID, int hudX, int hudY, int xOffset, int yOffset, int range, str sprite, str text, int holdTime, str colour)
{

	int dist, angle, vang, pitch, x, y;

	if (holdTime == 0) { holdTime = 0.1; }
	if (hudX == 0) { hudX = 640; }
	if (hudY == 0) { hudY = 480; }

	if(sprite != -1)
	{

		//SetFont(sprite);
		//text = "A";

	}

	SetHudSize(hudX, hudY, 1);
	x = GetActorX(tid) - GetActorX(0);
	y = GetActorY(tid) - GetActorY(0);

	vang = VectorAngle(x,y);
	angle = (vang - GetActorAngle(0) + 1.0) % 1.0;

	if(((vang+0.125)%0.5) > 0.25) dist = FixedDiv(y, sin(vang));
	else dist = FixedDiv(x, cos(vang));

	if ((angle < 0.23 || angle > 0.85) && (dist >> 16) < range)
	{

		if (GetActorPitch(0) >= -0.5 && GetActorPitch(0) <= 0.5)
		{

			pitch = VectorAngle(dist, GetActorZ(tid) - (GetActorZ(0) + GetActorViewHeight(0)));
			pitch += FixedMul(GetActorPitch(0), 1.2) % 1.0;

			if ((hudX/2) * sin(angle) != 0 && cos(angle) != 0 && (hudX/2) * sin(pitch) != 0 && cos(pitch) != 0)
			{

				x = hudX/2 - ((hudX/2) * sin(angle) / cos(angle));
				y = hudY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));

				x+=xOffset;
				y+=yOffset;

				HudMessage(s:text; HUDMSG_PLAIN, msgID, colour, (x << 16), (y << 16), holdTime);

			}

		}

	}

}

script "Thing_Activate" (int tid){ Thing_Activate(tid); }

script "Thing_DeActivate" (int tid){ Thing_DeActivate(tid); }

bool demogliphStarted;

script "PressUse" (void){

    if ( !demogliphStarted ){

        SetHudSize(640, 480, 0);
        SetActivator(0);
        HudMessageBold( s:"Press USE";	HUDMSG_PLAIN, 13131317, CR_RED, 320.0, 200.0, 0.1);
    }
}

script "DemogliphStarted" (void) {

    if ( demogliphStarted ){ SetResultValue(1); } else { SetResultValue(0); }
}

script "DemoMap" (int CamTID){

    ExternalCamera = true;
    SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
    AmbientSound("world/lookat3", 1.0);
    FadeTo(0, 0, 0, 1.0, 1.5 );
    ACS_NamedExecuteAlways("Mus_DTEMPLE", 0);

    delay( 35 + 17 );
    Thing_Activate(CamTID);
    ChangeCamera(CamTID, 0 , 0);
    FadeTo(0, 0, 0, 0.0, 1.5 );

    while (true) {

        delay(1);

        HudMessage(s:"";HUDMSG_PLAIN,776,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));
        HudMessage(s:"";HUDMSG_PLAIN,777,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));
        HudMessage(s:"";HUDMSG_PLAIN,778,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));
        HudMessage(s:"";HUDMSG_PLAIN,779,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));
        HudMessage(s:"";HUDMSG_PLAIN,780,CR_DARKRED,0.2, 0.02, FixedDiv(1, 35));

        if ( GetPlayerInput(-1, INPUT_BUTTONS) ){ break; }
    }

    ACS_NamedExecuteAlways("RestoreMusic", 0);
    FadeTo(0, 0, 0, 1.0, 1.5 );

    delay(35+17);
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
    ChangeCamera(0, 0 , 0);
    FadeTo(0, 0, 0, 0.0, 1.5 );

    delay(35);
    ExternalCamera = false;
}

script "DemoGliph" (int CamTID, int CovenID){

    SetActivator (0);

    if ( WaveOnline ){ Terminate;   }
    if ( !CamTID    ){ CamTID=2200; }
    if ( !CovenID   ){ CovenID=0;   }

    delay(2);
    Thing_Activate(CamTID);
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    AmbientSound("world/lookat3", 1.0);
    FadeTo(0, 0, 0, 1.0, 1.5 );
    ACS_NamedExecuteAlways("Mus_DTEMPLE", 0);

    delay( 35 + 17 );
    demogliphStarted = true;

    SetHudSize(320, 240, 0);
    SetFont("DSCscrsh");
    HudMessage(	s:"A";	HUDMSG_PLAIN, 13131315, CR_DARKRED, 160.0, 120.0, 3.0);

    ChangeCamera(CamTID, 0 , 0);
    FadeTo (0, 0, 0, 0.0, 1.5 );

    delay(35*3);

    while (true) {

        delay(1);

        SetHudSize(320, 240, 0);
        SetFont("DSCscrsh");
        HudMessage(	s:"A";	HUDMSG_PLAIN, 13131315, CR_DARKRED, 160.0, 120.0, 0.1);

        switch (CovenID) {

            case 1:
                    ACS_NamedExecuteAlways("Covenant1", 0, 0, 0, 0); break;
            case 2:
                    ACS_NamedExecuteAlways("Covenant2", 0, 0, 0, 0); break;
            case 3:
                    ACS_NamedExecuteAlways("Covenant3", 0, 0, 0, 0); break;
            case 4:
                    ACS_NamedExecuteAlways("Covenant4", 0, 0, 0, 0); break;
            case 5:
                    ACS_NamedExecuteAlways("Covenant5", 0, 0, 0, 0); break;
            default:
                    ACS_NamedExecuteAlways("Covenant", 0, 0, 0, 0);
        }

        if ( GetPlayerInput(0, INPUT_BUTTONS) ){ break; }
    }

    ACS_NamedExecuteAlways("RestoreMusic", 0);
    FadeTo(0, 0, 0, 1.0, 1.5 );

    delay( 35 + 17 );
    demogliphStarted = false;
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
    ChangeCamera(0, 0 , 0);
    FadeTo(0, 0, 0, 0.0, 1.5 );
    hudmessageBold(s:" "; HUDMSG_PLAIN , 0, CR_RED, 1.5, 0.95, 1.0);

    delay(35);
}

function void Pause (void){

    if ( GameType() == 0 ) {

        GiveInventory("TotalTimeFreezer",1);
        SetPlayerProperty(1,1,PROP_TOTALLYFROZEN);
    }
}

function void UnPause (void){

    if ( GameType() == 0 ){

        TakeInventory("TotalTimeFreezer",1);
        SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);
    }
}

script "LevelEndingMessage" (int sec){

    if ( MapEndText ){

        PrintBold(s:MapEndText,d:sec,s:" seconds");
        Terminate;
    }

    str Text;
    switch (random(1, 10)) {

        case 1:
                Text = StrParam(l:"MAP_ENDING_TEXT1");
                break;
        case 2:
                Text = StrParam(l:"MAP_ENDING_TEXT2");
                break;
        case 3:
                Text = StrParam(l:"MAP_ENDING_TEXT3");
                break;
        case 4:
                Text = StrParam(l:"MAP_ENDING_TEXT4");
                break;
        case 5:
                Text = StrParam(l:"MAP_ENDING_TEXT5");
                break;
        case 6:
                Text = StrParam(l:"MAP_ENDING_TEXT6");
                break;
        case 7:
                Text = StrParam(l:"MAP_ENDING_TEXT7");
                break;
        case 8:
                Text = StrParam(l:"MAP_ENDING_TEXT8");
                break;
        case 9:
                Text = StrParam(l:"MAP_ENDING_TEXT9");
                break;
        case 10:
                Text = StrParam(l:"MAP_ENDING_TEXT10");
                break;
    }

    MapEndText = Text;
    PrintBold(s:Text,d:sec,s:" seconds");
}

//
// WAVES
//

script "DeathBufFIX" death  {

    //this is check for death restart clear inventory bug
    delay( 35 * 10 );
    currentWave     = 0;
    DSCplayerRank   = 0;
    TotalKills      = 0;
    CurrentWave     = 0;
    AmmoMaxRnd      = 0;
    WeaponGotID     = 0;
    ChangeLevel ("DSCMAP01", 0, CHANGELEVEL_NOINTERMISSION|CHANGELEVEL_RESETHEALTH|CHANGELEVEL_RESETINVENTORY, -1);
}

script "FinishWaveFromMenue" enter {

    if ( GetUserCVar(0, "dsc_finish_wave") == true ){

        SetUserCVar(0, "dsc_finish_wave", false);
        SpawnedMonstersOnTheMap = 0;
        Log(s:"You used an emergency stop of the wave.");
        Log(s:"You may have to wait for the mystical skull to appear.");
        PrintBold(s:"You used an emergency stop of the wave.\nYou may have to wait for the mystical skull to appear.");
    }

    delay(1);
    restart;
}

script "GetAmmoSlot" (void){

    SetResultValue( Random(0,AmmoMaxRnd) );
}

script "GetWeaponGotID" (void){

    SetResultValue(WeaponGotID);
}

script "GetWeaponGotIDforWeaponSpawner" (void){

    int WeaponID;
    //WeaponGotID - actual weapon num
    //1. ShotgunGot
    //2. ssgGot
    //3. ChaingunGot
    //4. RLCGot
    //5. PlasmaGot
    //6. BfgGot
    //Log(s:"Weapon randomizator ", d:WeaponGotID);

    switch (WeaponGotID) {

        case 1:
                if ( CheckInventory("ShotgunGot") > 0 ){

                    if ( Random(1, 100) <= 80 ){

                        WeaponID = 1;

                    } else {

                        WeaponID = 2;
                    }

                } else {

                    GiveInventory("ShotgunGot", 1);
                    WeaponID = 1;
                }

                ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
                break;
        case 2:
                //Log(s:"Try SSG ");
                if ( CheckInventory("ssgGot") > 0 ){

                    //Log(s:"It is no ssg now");
                    if ( Random(1, 100) <= 50 ){

                        WeaponID = Random(1, WeaponGotID);

                    } else {

                        WeaponID = WeaponGotID;
                    }
                    //Log(s:"Randomised to ", d:WeaponID);

                } else {

                    GiveInventory("ssgGot", 1);
                    WeaponID = WeaponGotID;
                    //Log(s:"Gived SSG ", d:WeaponID);
                }

                ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
                break;
        case 3:
                if ( CheckInventory("ChaingunGot") > 0 ){

                    if ( Random(1, 100) <= 50 ){

                        WeaponID = Random(1, WeaponGotID);

                    } else {

                        WeaponID = WeaponGotID;
                    }

                } else {

                    GiveInventory("ChaingunGot", 1);
                    WeaponID = WeaponGotID;
                }

                ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
                break;
        case 4:
                if ( CheckInventory("RLCGot") > 0 ){

                    if ( Random(1, 100) <= 50 ){

                        WeaponID = Random(1, WeaponGotID);

                    } else {

                        WeaponID = WeaponGotID;
                    }

                } else {

                    GiveInventory("RLCGot", 1);
                    WeaponID = WeaponGotID;
                }
                ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
                break;
        case 5:
                if ( CheckInventory("PlasmaGot") > 0 ){

                    if ( Random(1, 100) <= 50 ){

                        WeaponID = Random(1, WeaponGotID);

                    } else {

                        WeaponID = WeaponGotID;
                    }

                } else {

                    GiveInventory("PlasmaGot", 1);
                    WeaponID = WeaponGotID;
                }
                ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
                break;
        case 6:
                if ( CheckInventory("BfgGot") > 0 ){

                    if ( Random(1, 100)<=50 ){

                        WeaponID = Random(1, WeaponGotID);

                    } else {

                        WeaponID = WeaponGotID;
                    }

                } else {

                    GiveInventory("BfgGot", 1);
                    WeaponID = WeaponGotID;
                }
                ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
                break;
        default:
                WeaponID = 1;
    }

    //Log(s:"Rezulted to ", d:WeaponID);
    SetResultValue(WeaponID);
}

script "DisplaySpawnedWeaponMessage" (int WeaponID){

    switch (WeaponID) {

        case 1:
                HudMessageBold(s:"Slot 3 weapon spawned";
                        HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
                //PrintBold(s:"Shotgun spawned");
                break;
        case 2:
                HudMessageBold(s:"Slot 3-1 weapon spawned";
                        HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
                //PrintBold(s:"SuperShotgun spawned");
                break;
        case 3:
                HudMessageBold(s:"Slot 4 weapon spawned";
                        HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
                //PrintBold(s:"Chaingun spawned");
                break;
        case 4:
                HudMessageBold(s:"Slot 5 weapon spawned";
                        HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
                //PrintBold(s:"RocketLauncher spawned");
                break;
        case 5:
                HudMessageBold(s:"Slot 6 weapon spawned";
                        HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
                //PrintBold(s:"PlasmaRifle spawned");
                break;
        case 6:
                HudMessageBold(s:"Slot 7 weapon spawned";
                        HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
                //PrintBold(s:"BFG9000 spawned");
                break;
        default:
                HudMessageBold(s:"Weapon spawned";
                        HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
                //PrintBold(s:"Something spawned");
                break;
    }
}

script "GetAttempt" (void){

    SetResultValue(GlobalAttempt);
}

script "GetProgress" (void){

    SetResultValue( (currentWave * 100) / maxWaveCount );
}

script "GetLiveMonstersCount" (void){

    SetResultValue(SpawnedMonstersOnTheMap);
}

script "NewMonsterIsSpawned" (int monstersCount){

    SpawnedMonstersOnTheMap = monstersCount;
}

function bool BEorvanilla (void){

    if (
            CheckActorClass(0, "BEDoomer") ||
            CheckActorClass(0, "BESemiDoomer") ||
            CheckActorClass(0, "DoomPlayer")
        ){
            return true;
    }

    return false;
}

function bool BE (void){

    if ( isBE ){ return true; }

    return false;
}

script "BE" (void){

    if ( isBE ){

        SetResultValue(true);
        terminate;
    }

    SetResultValue(false);
}

function int GetTotalMonsters(void){

    if ( !BEorvanilla() ){

        if ( SpawnedMonstersOnTheMap < 0 ){

            SpawnedMonstersOnTheMap=0;
        }

        return SpawnedMonstersOnTheMap;
    }

    return ThingCount(T_NONE, 666666);
}

script "DisplayInfo" (void) {

    //ACS_NamedExecute("DisplayWaveStats", 0, 5, 3100000);

    if ( CheckActorClass(0, "BEDoomer") || CheckActorClass(0, "BESemiDoomer") ){

        isBE = true;

    } else {

        isBE = false;
    }

    while (true) {

        if ( ExternalCamera ){

            delay(35);
            continue;
        }

        int mtotal = GetTotalMonsters();

        if ( !WaveOnline && DSCscreenFade == 0 ){

            int progress = ( currentWave * 100 ) / maxWaveCount;
            SetHudSize(640, 480, 0);
            SetFont("SMALLFONT");

            HudMessage(
            d:mtotal, s:" demons left";
            HUDMSG_PLAIN,779,CR_DARKBROWN, 200.0, 10.0, 1, 0);

            HudMessage(
            d:progress, s:"%", s:" progress";
            HUDMSG_PLAIN,780,CR_DARKBROWN, 430.0, 10.0, 1, 0);

        } else {

            SetHudSize(800, 600, 0);
            SetFont("BIGFONT");

            if ( mtotal > 1 ){

                HudMessage(
                d:mtotal, s:" demons left";
                HUDMSG_PLAIN,779,CR_RED, 400.0, 30.0, 1, 0);

            } else {

                if ( mtotal == 1 ){

                    HudMessage(
                    d:mtotal, s:" demon left";
                    HUDMSG_PLAIN,779,CR_RED, 400.0, 30.0, 1, 0);
                }

                if ( mtotal == 0){

                    HudMessage(s:"";HUDMSG_PLAIN,779,CR_DARKBROWN, 200.0, 10.0, 1, 0);
                }
            }

            HudMessage(s:"";HUDMSG_PLAIN,780,CR_DARKBROWN, 200.0, 10.0, 1, 0);
        }
        delay(35);
    }
}

script "SetWaveDelay" (int WDelay) { //setter from z-script

    WaveDelay = WDelay;
}

/**
 * Delay disabled, Countdown disabled
 */
script "SpawnWave" (int zoneTid, int ScullTag, int WeaponTag){

    if ( ScullTag != 888888 ){

        WaveOnline = true;
        KilledWaveStart = GetLevelInfo (LEVELINFO_KILLED_MONSTERS);

        if ( !NOspawn ){//debug thing

            //delay( 35 * 3 );

            PlaySound(0, "Howling", CHAN_AUTO, 1.0,  false, ATTN_NONE );
            /*
            delay( 35 * 3 );

            for (int i = 5; i > 0; i--){

                Print(s:"Wave will come in ",d:i,s:" seconds");
                delay(35);
            }
             */
        }
    }

    if (!NOspawn){

        Thing_Activate(zoneTid);
    }

    if ( ScullTag != 888888 ){

        if (!NOspawn){ //debug thing

            //PrintBold(i:WaveDelay);
            delay(WaveDelay);
            //PrintBold(s:"delayed");
        }

        while ( GetTotalMonsters() > 0 ){ delay(35); }

        //AmbientSound("WAVEDONE",127);
        PlaySound(0, "WAVEDONE", CHAN_AUTO, 1.0,  false, ATTN_NONE );
        killedPerWave = GetLevelInfo (LEVELINFO_KILLED_MONSTERS)-KilledWaveStart;
        ACS_NamedExecute("DisplayWaveStats", 0, killedPerWave, TotalKills+GetLevelInfo (LEVELINFO_KILLED_MONSTERS));
        //PrintBold(s:"Wave ", d:CurrentWave+1,  s:" complete!");

        CurrentWave ++;

        if (!NOspawn){//debug thing

            delay( 35 * 1 ); // 3
        }

        // @FIXME: not always working
        Thing_Destroy(666667,0,0); //Previously spawned vanilla weapon

        if (!NOspawn){//debug thing

            delay( 35 * 1 );
        }

        ACS_NamedExecute("SpawnWeapon", 0, WeaponTag);

        if (!NOspawn){//debug thing

            delay( 35 * 1 ); // 3
        }

        ACS_NamedExecuteAlways("RestoreMusic", 0);


        if (!LastWave){

            SpawnSpotFacingForced("WaveScullDEC", ScullTag, 100600);

        } else {

            SpawnSpotFacingForced("DoomSlayerGliph", ScullTag, 100600);
        }

        SetThingSpecial(100600, ACS_NamedExecute, "NextWaveReady");
        WaveOnline = false;

        if ( getRank() > DSCplayerRank ){

            delay( 35 * 3 );
            ACS_NamedExecuteAlways("DisplayNextRank", 0);
        }

        Autosave();
    }
}

script "DisplayWaveStats" (int PerWave, int Total){

    SetHudSize(800, 600, 0);
    SetFont("WAVeLINE");
    HudMessageBold(s:"A";
            HUDMSG_PLAIN|HUDMSG_LAYER_UNDERHUD, 399, CR_GOLD, 400.0, 270.0, 0);
    SetFont("BIGFONT");
    SetHudSize(640, 480, 0);

    delay(1);
    HudMessageBold(s:"Wave ", d:CurrentWave,  s:" complete!";
            HUDMSG_PLAIN, 400, CR_GOLD, 320.0, 180.0, 0);
    SetFont("SMALLFONT");
    HudMessageBold(s:"Kills per wave: ", d:PerWave;
            HUDMSG_PLAIN, 401, CR_GOLD, 320.0, 200.0, 0);
    HudMessageBold(s:"Total kills: ", d:Total;
            HUDMSG_PLAIN, 402, CR_GOLD, 320.0, 210.0, 0);
    ACS_NamedExecuteAlways("DisplayLeftGliph", 0, PerWave);
    ACS_NamedExecuteAlways("DisplayRightsGliph", 0, Total);

    delay( 35 * 4 ); // * 7
    HudMessageBold(s:""; HUDMSG_PLAIN, 399, CR_GOLD, 0.5, 0.3, 0);
    HudMessageBold(s:""; HUDMSG_PLAIN, 400, CR_GOLD, 0.5, 0.3, 0);
    HudMessageBold(s:""; HUDMSG_PLAIN, 401, CR_GOLD, 0.5, 0.3, 0);
    HudMessageBold(s:""; HUDMSG_PLAIN, 402, CR_GOLD, 0.5, 0.3, 0);

    SetHudSize(0, 0, 0);
}

script "DisplayLeftGliph" (int num){

    SetHudSize(800, 600, 0);
    SetFont("BIGFONT");
    int cat = GetCat(num);
    int catNum = GetCatNum(num);
    HudMessageBold(d:catNum, s:" X ", d:cat;
    HUDMSG_PLAIN, 403, CR_RED, 150.0, 250.0, 7.0);

    SetFont( GetGliph(num) );
    HudMessageBold(s:"A"; HUDMSG_PLAIN, 404, CR_RED, 150.0, 175.0, 7.0);
    SetHudSize(0, 0, 0);
}

script "DisplayRightsGliph" (int num){

    SetHudSize(800, 600, 0);
    SetFont("BIGFONT");
    int cat = GetCat(num);
    int catNum = GetCatNum(num);
    HudMessageBold(d:catNum, s:" X ", d:cat;
    HUDMSG_PLAIN, 405, CR_RED, 800.0-150.0, 250.0, 7.0);

    SetFont(GetGliph (num));
    HudMessageBold(s:"A"; HUDMSG_PLAIN, 406, CR_RED, 800.0-150.0, 175.0, 7.0);
    SetHudSize(0, 0, 0);
}

function str GetGliph (int num) {

    if ( num * 0.0001 >> 16 >= 100) { return "decgl6";}
    if ( num * 0.0001 >> 16 >= 10 ) { return "decgl5";}
    if ( num * 0.0001 >> 16 >= 1  ) { return "decgl4";}
    if ( num * 0.001  >> 16 >= 1  ) { return "decgl3";}
    if ( num * 0.01   >> 16 >= 1  ) { return "decgl2";}
    if ( num * 0.1    >> 16 >= 1  ) { return "decgl1";}

    return "decgl0";
}

function int GetCat (int num){

    if ( num * 0.0001 >>16 >= 100) { return 1000000;}
    if ( num * 0.0001 >>16 >= 10 ) { return 100000; }
    if ( num * 0.0001 >>16 >= 1  ) { return 10000;  }
    if ( num * 0.001  >>16 >= 1  ) { return 1000;   }
    if ( num * 0.01   >>16 >= 1  ) { return 100;    }
    if ( num * 0.1    >>16 >= 1  ) { return 10;     }

    return 1;
}

function int GetCatNum (int num){

    int cat = GetCat(num);
    int CatNum = num / cat;

    return CatNum;
    //return ceil(num/cat)/65536;
}

script "NextWaveReady" (void){	NextWaveReady = true; }

function bool GetDSCscreenFade(void){

    if ( DSCscreenFade > 0 ){

        return true;
    }

    return false;
}

script "SpawnWeapon" (int WeaponTag){

    //PrintBold(s:"Your progress ", d:progression, s:"%");
    delay( 35 * 2 );

    while ( GetDSCscreenFade() ){ delay(5); }

    if (!WeaponTag){ WeaponTag = 100400; }

    int progression = (currentWave * 100) / maxWaveCount ;
    //Thing_Remove(666667);

    if ( progression >= shotGunSpawnProgressInPercent && WeaponGotID < 1 ){

        AmmoMaxRnd = 1;
        WeaponGotID = 1;
        //PrintBold(s:"Shotgun spawned");

        //Thing_Activate(WeaponTag);
    } else if ( progression >= SSGSpawnProgressInPercent && WeaponGotID < 2 ){

        WeaponGotID = 2;
        //PrintBold(s:"SuperShotgun spawned");

        //Thing_Activate(WeaponTag);
    } else if (progression >= ChaingunSpawnProgressInPercent && WeaponGotID < 3 ){

        WeaponGotID = 3;
        //Thing_Destroy(666667,0,0);
        //PrintBold(s:"Chaingun spawned");
        //Thing_Activate(WeaponTag);
    } else if (progression >= RLSpawnProgressInPercent && WeaponGotID < 4){

        WeaponGotID = 4;
        AmmoMaxRnd = 2;
        //PrintBold(s:"RocketLauncher spawned");

        //Thing_Activate(WeaponTag);
    } else if (progression >= PlasmaGunSpawnProgressInPercent && WeaponGotID < 5){

        WeaponGotID = 5;
        AmmoMaxRnd = 3;
        //PrintBold(s:"PlasmaRifle spawned");

        //Thing_Activate(WeaponTag);
    } else if (progression >= BFG9000SpawnProgressInPercent && WeaponGotID < 6){

        WeaponGotID = 6;
        //PrintBold(s:"BFG9000 spawned");
        //Thing_Activate(WeaponTag);
    }

    //PrintBold(d:WeaponGotID);

    if ( WeaponGotID >= 1 ){

        Thing_Activate(WeaponTag);
    }
}

script "ScullHasCome" (void){

    while ( DSCscreenFade > 0 ){ delay(1); }

    delay( 35 * 3 ); //to not intersect with weapon spawn message
    // @TODO: add localization support
    PrintBold(s:"Mystic Skull has arrived.\nPick it up for continue.");
}

script "GliphHasCome" (void){

    while ( DSCscreenFade > 0 ){ delay(1); }

    delay( 35 * 3);//to not intersect with weapon spawn message
    PrintBold(s:"Gliph has arrived.\nPick it up for finish.");
}

script "Mus_G1" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_G1", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_G2" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_G2", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_G3" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_G3", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_L1" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_L1", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_M1" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_M1", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_M2" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_M2", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_M3" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_M3", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_SM1" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTLsm1", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_SM2" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTLsm2", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_SM3" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTLsm3", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_TITLEMAP" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("MAINTTL", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_COMPUTER" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("COMPUTER", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_FASTBASS" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("FASTBASS", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_Alastor" (void){

    if( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("Alastor", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_DTEMPLE" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("DTEMPLE", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_BTTL_ES" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_ES", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "Mus_BTTL_ORD" (void){

    if ( !IgnoreWaveMusicChange ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("BTTL_ORD", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "RestoreMusic" (void){

    if ( !IgnoreWaveMusicChange && restoreMusicAfterWave ){

        ACS_NamedExecuteAlways("FadeOutMusic", 0);

        delay(100);
        SetMusic("*", 0);
        ACS_NamedExecuteAlways("FadeInMusic", 0);
    }
}

script "GiveFirstEpisodeDoneItems" (void){

    if ( CheckInventory("map06done") == 0 ){

        GiveInventory("map01done", 1);
        GiveInventory("map02done", 1);
        GiveInventory("map03done", 1);
        GiveInventory("map04done", 1);
        GiveInventory("map05done", 1);
        GiveInventory("map06done", 1);
    }
}


//
// DSC RANKS
//

//DSCplayerRank = 9;
script "SerialKiller" (int amount){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    int RealAmount = random(amount, amount*3);
    //do something with amount of kills
    //DSCHealthBonus
    //DSCbasicArmorBonus
    GiveActorInventory(0, "DSCHealthBonus", RealAmount);
    GiveActorInventory(0, "DSCbasicArmorBonus", RealAmount);

    Log(s:"Killing Machine: ", d:RealAmount);
}

script "strongholdBonus" (void){

    if (GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if( DSCplayerRank >= 5 ){

        if ( Random(1, 100) <= StrongHoldChance ){

            GiveActorInventory(0, "DSCarmorBonus10", 1);
            Log(s:"Stronghold: Armor Bonus 10%");
        }
    }
}

script "strongholdHealArmorBonus" (void){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if ( DSCplayerRank >= 5){

        GiveActorInventory(0, "DSCarmorBonus5", 1);
        Log(s:"Stronghold: Healing heart gives Armor Bonus 5%");
    }
}

script "strongholdScullArmorBonus" (void){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if ( DSCplayerRank >= 5){

        GiveActorInventory(0, "DSCarmorBonus5", 1);
        Log(s:"Stronghold: Mystic Skull gives Armor Bonus 5%");
    }
}

script "berserkBONUS" (void){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if ( DSCplayerRank >= 6 ){

        if ( Random(1, 100) <= berserkBonusChance ){

            //GiveActorInventory(0, "Berserk", 1);
            SpawnSpotFacingForced ("Berserk", 0, 0);
            Log(s:"Berserker: Berserk item got");
        }
    }
}

script "MasterofSurvival" enter {

    if( GetUserCVar(0, "dsc_heroic_mode") == true ){

        delay(5);
        restart;
    }

    if ( DSCplayerRank >= 1 ){

        if (
                GetActorProperty (0, APROP_HEALTH) < OldPlayerHealth &&
                GetActorProperty (0, APROP_HEALTH) < 25
            ){

            if ( random(0, 100) < 50 ){

                GiveActorInventory(0, "DSCHealthBonus", 5);
                Log(s:"Last Breath: Health bonus 5%");
            }
        }
    }

    OldPlayerHealth = GetActorProperty (0, APROP_HEALTH);

    delay(5);
    restart;
}

script "BoneCollector" (void){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if ( DSCplayerRank >= 3 && random(0, 100) < 30 ){

        Log(s:"Bone Collector: Health and Ammo respawned.");
        SetResultValue(1);

    } else {

        SetResultValue(0);
    }
}

script "invisBONUS" (void){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if ( DSCplayerRank >= 7 ){

        if ( Random(1, 100) <= invisBonusChance ){

            SpawnSpotFacingForced ("BlurSphere", 0, 0);
            //GiveActorInventory(0, "BlurSphere", 1);
            Log(s:"Spectre: BlurSphere item got");
        }
    }
}

bool TimeFreezed = 0;
script "TimeStopAmbience" enter {

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){

        delay(5);
        restart;
    }

    if (TimeFreezed){

        PlaySound(0, "misc/TimestopLoop", CHAN_ITEM, 1.0, true, ATTN_NONE);

        while ( TimeFreezed ){ delay(5); }

        StopSound(0, CHAN_ITEM);
    }

    delay(5);
    restart;
}

script "timeFreezeBONUS" (void){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if ( DSCplayerRank >= 6 ){

        if ( Random(1, 100) <= PowerTimeFreezerChance ){

            GiveInventory("PowerTimeFreezer",1);
            AmbientSound("misc/TimestopStart", 1.0);
            TimeFreezed = true;
            Log(s:"Spectre: PowerTimeFreezer item got");

            delay( 35 * 12 );
            TimeFreezed = false;
        }
    }
}

script "invuBONUS" (void){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if ( DSCplayerRank >= 8 ){

        if ( Random(1, 100) <= invuBonusChance ){

            //GiveActorInventory(0, "InvulnerabilitySphere", 1);
            SpawnSpotFacingForced ("InvulnerabilitySphere", 0, 0);
            Log(s:"Blessing: Invulnerability Sphere item got");
        }
    }
}

script "ammoRespawnedIn" (int time){

    int val;

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){

        val = FixedDiv(AmmoRecallBaseTime, GetUserCVar(0, "dsc_spawn_factor"));
        //Log(s:"Ammo supply respawned in ", d:val, s:" sec");
        Terminate;
    }

    if ( DSCplayerRank >= 4 ){

        val = FixedDiv(time, GetUserCVar(0, "dsc_spawn_factor"));
        //Log(s:"Gunner: Ammo supply respawned in ", d:val, s:" sec");

    } else {

        val = FixedDiv(AmmoRecallBaseTime, GetUserCVar(0, "dsc_spawn_factor"));
        //Log(s:"Ammo supply respawned in ", d:val, s:" sec");
    }
}

script "GetAmmoRecallTime" (void){

    int val;

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){

        SetResultValue(AmmoRecallBaseTime);
        Terminate;
    }

    if ( DSCplayerRank >= 4 ){

        val = AmmoRecallBaseTime - fixedmul(AmmoRecallBaseTime, 0.5);
        SetResultValue(val);

    } else {

        SetResultValue(AmmoRecallBaseTime);
    }
}

script "AidRespawned" (int time){

    int val = FixedDiv(time, GetUserCVar(0, "dsc_spawn_factor"));
    //Log(s:"Healing heart respawned in ", d:val, s:" sec");
}

script "GetAIDhealthRecallTime" (void){

    int val;

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){

        SetResultValue(AIDhealthRecallBaseTime);
        Terminate;
    }

    if ( DSCplayerRank >= 2 ){

        val = AIDhealthRecallBaseTime - FixedMul(AIDhealthRecallBaseTime, 0.5);
        //Log(s:"Vitality 3/3: Health respawned in ", d:val);
        SetResultValue(val);

    } else {

        SetResultValue(AIDhealthRecallBaseTime);
    }
}

script "GetAIDhealthAmount" (void){

    int val;

    /*if(DSCplayerRank==0){
            Log(s:"Health bonus ", i:DSCbaseHealthBonus);
            SetResultValue(DSCbaseHealthBonus);
    }
    if(DSCplayerRank==1){
            val = DSCbaseHealthBonus + ((DSCbaseHealthBonus * 0.15) >> 16);
            Log(s:"Vitality 1/3: Health bonus ", d:val);
            SetResultValue(val);
    }
    if(DSCplayerRank==2){
            val = DSCbaseHealthBonus + ((DSCbaseHealthBonus * 0.3) >> 16);
            Log(s:"Vitality 2/3: Health bonus ", d:val);
            SetResultValue(val);
    }*/

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){

        Log(s:"Health bonus ", i:DSCbaseHealthBonus, s:"%");
        SetResultValue(DSCbaseHealthBonus);
        Terminate;
    }

    if ( DSCplayerRank >= 2 ){

        val = DSCbaseHealthBonus + ((DSCbaseHealthBonus * 0.5) >> 16);
        Log(s:"Vitality: Health bonus ", d:val, s:"%");
        SetResultValue(val);

    } else {

        Log(s:"Health bonus ", i:DSCbaseHealthBonus, s:"%");
        SetResultValue(DSCbaseHealthBonus);
    }
}

script "AbsorbHealth" (int HealthAmount){

    //HealthAmount  = killed monster default health
    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    switch (DSCplayerRank) {

        case 9:
                int val = FixedMul(HealthAmount, 0.05);
                Log(s:"Reaper: absorbed ", d:val, s:"% health");
                GiveActorInventory(0, "DSChealthBonus400", val);
                break;
        default:
                terminate;
    }
    //int HealthToGive = HealthAmount*multipler/100;
    //GiveActorInventory(0, "DSChealthBonus", HealthToGive);
}

script "SetConsoleRank" enter {

    if ( GetCVar("dsc_full_progress") > 0 ){

        SetCVar("dsc_full_progress", 0);
        DSCplayerRank = 9;
        CurrentWave = 200;
        AmmoMaxRnd = 3;
        WeaponGotID = 5;
        TotalKills = 15000;
    }

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){

        SetCVar("dsc_player_rank", -1);
        delay(1);
        restart;
    }

    if( GetCVar("dsc_player_rank") >= 0 ){

        DSCplayerRank = GetCVar("dsc_player_rank");

        switch (DSCplayerRank) {

            case 0:
                    TotalKills = 0;     break;
            case 1:
                    TotalKills = 50;    break;
            case 2:
                    TotalKills = 100;   break;
            case 3:
                    TotalKills = 200;   break;
            case 4:
                    TotalKills = 400;   break;
            case 5:
                    TotalKills = 800;   break;
            case 6:
                    TotalKills = 1600;  break;
            case 7:
                    TotalKills = 3200;  break;
            case 8:
                    TotalKills = 6400;  break;
            case 9:
                    TotalKills = 12800; break;
        }

        SetCVar("dsc_player_rank", -1);
    }

    delay(1);
    //DSCplayerRank = 9;
    restart;
}

function int getRank (void){

    //test thing
    //TotalKills = 15000;
    //test thing

    int TK = TotalKills+GetLevelInfo (LEVELINFO_KILLED_MONSTERS);

    if ( TK >= 12800)	{	return 9;	}
    if ( TK >= 6400 )	{	return 8;	}
    if ( TK >= 3200 )	{	return 7;	}
    if ( TK >= 1600 )	{	return 6;	}
    if ( TK >= 800  )	{	return 5;	}
    if ( TK >= 400  )	{	return 4;	}
    if ( TK >= 200  )	{	return 3;	}
    if ( TK >= 100  )	{	return 2;	}
    if ( TK >= 50   )   {	return 1;	}

    return 0;
}

function int getKillsToRank (int CurrentKills){

    if ( CurrentKills < 50   )	{	return 50-CurrentKills;		}
    if ( CurrentKills < 100  )	{	return 100-CurrentKills;	}
    if ( CurrentKills < 200  )	{	return 200-CurrentKills;	}
    if ( CurrentKills < 400  )	{	return 400-CurrentKills;	}
    if ( CurrentKills < 800  )	{	return 800-CurrentKills;	}
    if ( CurrentKills < 1600 )	{	return 1600-CurrentKills;	}
    if ( CurrentKills < 3200 )	{	return 3200-CurrentKills;	}
    if ( CurrentKills < 6400 )	{	return 6400-CurrentKills;	}
    if ( CurrentKills < 12800)	{	return 12800-CurrentKills;	}

    return 50;
}

function str getRankString (int rank){

    if (!rank){ rank = DSCplayerRank; }

    switch (rank) {

        case 0:
                return "Numb";
        case 1:
                return "Recruit";
        case 2:
                return "Guardian";
        case 3:
                return "Warrior";
        case 4:
                return "Destroyer";
        case 5:
                return "Tyrant";
        case 6:
                return "Demon Hunter";
        case 7:
                return "Hell Walker";
        case 8:
                return "Doom Slayer";
        case 9:
                return "Hell's End";
    }

    return "Numb";
}

function str getRankAchive (int rank){

    switch (rank) {

        case 0:
                return "Killing Machine";
        case 1:
                return "Last Breath";
        case 2:
                return "Vitality";
        case 3:
                return "Bone Collector";
        case 4:
                return "Gunner";
        case 5:
                return "Stronghold";
        case 6:
                return "Timelord";
        case 7:
                return "Spectre";
        case 8:
                return "Iron Will";
        case 9:
                return "Reaper";
    }

    return GetActorClass(0);
}

function str getRankAchiveInfo (int rank){

    switch (rank) {

        case 0:
                return "Mass murders restores some health and armor.";
        case 1:
                return "50% chance to restore 5% health\nwhen player is in critical state.";
        case 2:
                return "Player gets 50% more health.\nHealth respawns 50% faster.";
        case 3:
                return "30% chance to immediately respawn all\nhealth and ammo after mystic skull pickup";
        case 4:
                return "Ammo respawns 50% faster.";
        case 5:
                return "10% chance to get 10% armor for kill.\nHealing Heart and Mystic Skull gives 5% armor";
        case 6:
                return "2% chance to stop time\nfor 12 seconds for each kill.";
        case 7:
                return "3% chance to get INVISIBILITY\nfor each kill.";
        case 8:
                return "3% chance to get INVULNERABILITY\nfor each kill.";
        case 9:
                return "Player absorbs 5% health\nof each killed demon.";
    }

    return GetActorClass(0);
}

script "FadePlayerScreen" enter {

    delay(15);
    //ACS_NamedExecute("DisplayNextRank", 0);

    while (true){

        if ( DSCscreenFade > 0 ){

            FadeTo(0, 0, 0, 0.8, 1.0);
            SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
            //delay(DSCscreenFade);
            //FadeTo (0, 0, 0, 0.0, 1.0);
            //DSCscreenFade = 0;
        }

        if ( DSCscreenFade < 0 ){

            FadeTo(0, 0, 0, 0.0, 1.0);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            DSCscreenFade=0;
        }

        delay(5);
    }
}

script "DisplayAchives" (int disp){

    int infoOffset;
    int offsetStep   = 35.0;
    int offsetStart  = 180.0+35.0;
    int HeaderOffset = offsetStart;
    int start        = 0;

    if (disp){

        //if(getRank()){ start = 1;} else {start = 0;}

        for ( int i=start; i<=getRank(); i++ ){

            if ( getRank() ){

                HeaderOffset = offsetStart+offsetStep*(i-1);

            } else {

                HeaderOffset = offsetStart-offsetStep;
                //HeaderOffset = offsetStart+offsetStep*i;
            }

            SetHudSize(800, 600, 0);
            SetFont("SMALLFONT");
            HudMessageBold(s:getRankAchive(i);
                    HUDMSG_PLAIN, i+50, CR_CREAM, 400.0, HeaderOffset, 0);
            //SetHudSize(HudX, HudY, 0);
            HudMessageBold(s:getRankAchiveInfo(i);
                    HUDMSG_PLAIN, i+60, CR_TAN, 400.0, HeaderOffset+15.0, 0);
            SetHudSize(0, 0, 0);
        }

    } else {

        for (int n=0; n<10; n++){

            HudMessageBold(s:"";HUDMSG_PLAIN, n+50, CR_DARKRED, 0.5, HeaderOffset, 0);
            HudMessageBold(s:"";HUDMSG_PLAIN, n+60, CR_DARKRED, 0.5, HeaderOffset, 0);
        }
    }
}

script "DisplayRankInfo" enter {

    while (true) {
        
        // check if in game
        if (ExternalCamera){

            delay(35);
            continue;
        }
		//log(s:"back");
        if ( GetCVar("dsc_heroic_mode") == true ){

            HudMessage(s:"";HUDMSG_PLAIN,776,CR_DARKRED,0.2,0.02,1,0);
            HudMessage(s:"";HUDMSG_PLAIN,777,CR_DARKRED,0.2,0.02,1,0);
            HudMessage(s:"";HUDMSG_PLAIN,778,CR_DARKRED,0.2,0.02,1,0);

            delay(35);
            continue;
        }

        int TK = TotalKills+GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
        int mtotal = GetTotalMonsters();

        if ( !WaveOnline && DSCscreenFade == 0 ){

            SetHudSize(640, 480, 0);
            SetFont("SMALLFONT");
            HudMessage(
                    i:TK,
                    s:" killed demons total";
            HUDMSG_PLAIN,776,CR_DARKRED, 200.0, 20.0, 1,0);

            SetFont("BIGFONT");
            HudMessage(
                    s:"",
                    s:getRankString (0), s:"";
            HUDMSG_PLAIN,777,CR_DARKRED,320.0, 35.0, 1,0);
            SetFont("SMALLFONT");
            HudMessage(
                    s:"Next Rank: ",
                    s:getRankString(DSCplayerRank+1),
                    s:" (", i:getKillsToRank(TK),
                    s:" kills)";
            HUDMSG_PLAIN,778,CR_DARKRED, 420.0, 20.0, 1,0);

        } else {

            HudMessage(s:"";HUDMSG_PLAIN,776,CR_DARKRED,0.2,0.02,1,0);
            HudMessage(s:"";HUDMSG_PLAIN,777,CR_DARKRED,0.2,0.02,1,0);
            HudMessage(s:"";HUDMSG_PLAIN,778,CR_DARKRED,0.2,0.02,1,0);
        }

        delay(35);
    }
}

script "DisplayNextRank" (void){

    if ( GetUserCVar(0, "dsc_heroic_mode") == true ){ terminate; }

    if (ExternalCamera){  terminate; }

    if (!RankMenueOnScreen){

        Pause();
        RankMenueOnScreen = true;
        int NewRank = getRank();

        delay(1);
        DSCscreenFade = 1;

        for (int i = 0; i<=9; i++){

            SoundVolume (0, i, 0.0);
        }

        HudMessageBold(s:""; HUDMSG_PLAIN, 800, CR_RED, 0.5, 0.3, 0);
        HudMessageBold(s:""; HUDMSG_PLAIN, 801, CR_RED, 0.5, 0.3, 0);
        HudMessageBold(s:""; HUDMSG_PLAIN, 802, CR_RED, 0.5, 0.3, 0);
        HudMessageBold(s:""; HUDMSG_PLAIN, 803, CR_RED, 0.5, 0.3, 0);
        HudMessageBold(s:""; HUDMSG_PLAIN, 810, CR_RED, 0.5, 0.3, 0);

        SetHudSize(1920, 1200, 0);
        SetFont("DSCranks");
        HudMessage(
                s:"A";
                HUDMSG_PLAIN,810,CR_DARKRED, 960.0, 600.0, 1, 0);
                SetFont("BIGFONT");
        SetHudSize(0, 0, 0);

        SetFont("BIGFONT");

        if ( DSCplayerRank != NewRank ){

            DSCplayerRank = getRank();
            PlaySound (0, "world/RACHIVE" , 64, 1.0, false, ATTN_NONE);
            SetFont("SMALLFONT");
            HudMessageBold(s:"You gained rank";
                    HUDMSG_PLAIN, 801, CR_DARKRED, 0.5, 0.22, 0);
            SetFont("BIGFONT");
            HudMessageBold(s:getRankString(0);
                    HUDMSG_PLAIN, 802, CR_RED, 0.5, 0.25, 0);

        } else {

            PlaySound (0, "world/BigClose" , 64, 1.0, false, ATTN_NONE);

            SetFont("SMALLFONT");
            HudMessageBold(s:"Current rank";
                    HUDMSG_PLAIN, 801, CR_DARKRED, 0.5, 0.22, 0);
            SetFont("BIGFONT");
            HudMessageBold(s:getRankString(0);
                    HUDMSG_PLAIN, 802, CR_RED, 0.5, 0.25, 0);
        }

        ACS_NamedExecute("DisplayAchives", 0, true);
        SetFont("SMALLFONT");
        HudMessageBold(s:"Press Any Key to continue.";
                HUDMSG_PLAIN, 803, CR_RED, 0.5, 0.93, 0);

        /*for( i = 0; i<=9; i++){	SoundVolume (0, i, 1.0); }
        while (true){
                delay(1);
                if(GetPlayerInput(-1, INPUT_BUTTONS)){ break;}
        }
        ACS_NamedExecuteAlways("DisplayNextRank", 0);*/

    } else {

        /*
        while (
                !(GetPlayerInput(0, INPUT_BUTTONS) & BT_USE) ||
                (GetPlayerInput(0, INPUT_OLDBUTTONS) & BT_USE)
                ){
                    delay(1);
        }
        */

        UnPause();
        DSCscreenFade = -1;
        HudMessageBold(s:""; HUDMSG_PLAIN, 800, CR_RED, 0.5, 0.3, 0);
        HudMessageBold(s:""; HUDMSG_PLAIN, 801, CR_RED, 0.5, 0.3, 0);
        HudMessageBold(s:""; HUDMSG_PLAIN, 802, CR_RED, 0.5, 0.3, 0);
        HudMessageBold(s:""; HUDMSG_PLAIN, 803, CR_RED, 0.5, 0.3, 0);
        HudMessageBold(s:""; HUDMSG_PLAIN, 810, CR_RED, 0.5, 0.3, 0);
        ACS_NamedExecute("DisplayAchives", 0, false);
        RankMenueOnScreen = false;
        PlaySound (0, "world/BigClose" , 64, 1.0, false, ATTN_NONE);
    }
    /*
    int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
    if (buttons & (BT_ATTACK)) { print(s:"You could be pressing the attack key."); }
    */
}

script "DSCrankShotdown" enter {

    if ( RankMenueOnScreen && GetPlayerInput(-1, INPUT_BUTTONS) ){

        ACS_NamedExecuteAlways("DisplayNextRank", 0);
    }

    delay(1);
    restart;
}

script "ResetCounters" enter {

    NextWaveReady           = false;
    WaveOnline              = false;
    IgnoreWaveMusicChange   = false;
    SpawnedMonstersOnTheMap = 0;
    AchiveKillInSEc1        = 0;
    AchiveDieInSec1         = 0;
}

script "MonsterKilled" (void){

    AchiveKillInSEc1++;
    SaintHealthUpMultipler++;

    ACS_NamedExecuteAlways("strongholdBonus", 0);
    //ACS_NamedExecuteAlways("berserkBONUS", 0);
    ACS_NamedExecuteAlways("invisBONUS", 0);
    ACS_NamedExecuteAlways("timeFreezeBONUS", 0);

    ACS_NamedExecuteAlways("invuBONUS", 0);
    ACS_NamedExecute("AchiveKillInSEc1Counter", 0);
}

script "MonsterDied" (void){

    AchiveDieInSec1++;
    AchiveKillInSEc10++;
    ACS_NamedExecute("AchiveKillInSEc1Counter", 0);
    ACS_NamedExecute("AchiveKillInSEc10Counter", 0);
}

script "AchiveKillInSEc10Counter" (void) {

    delay( 35 * 10 );

    if ( AchiveKillInSEc10 >= 20 ){

        HudMessageBold(s:"You are real DOOM SLAYER!";
                        HUDMSG_PLAIN, 8010, CR_ORANGE, 0.5, 0.15, 5.0);
        HudMessageBold(i:AchiveKillInSEc10, s:" kills in 10 sec!";
                        HUDMSG_PLAIN, 8011, CR_ORANGE, 0.5, 0.17, 5.0);
        //PrintBold(s:"You are real DOOM SLAYER!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
        AchiveKillInSEc10 = 0;
        terminate;
    }

    if ( AchiveKillInSEc10 >= 10 ){

        HudMessageBold(s:"You are GREAT!";
                        HUDMSG_PLAIN, 8010, CR_ORANGE, 0.5, 0.15, 5.0);
        HudMessageBold(i:AchiveKillInSEc10, s:" kills in 10 sec!";
                        HUDMSG_PLAIN, 8011, CR_ORANGE, 0.5, 0.17, 5.0);
        //PrintBold(s:"You are GREAT!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
        AchiveKillInSEc10 = 0;
        terminate;
    }

    if ( AchiveKillInSEc10 >= 5 ){

        HudMessageBold(s:"Good work!";
                        HUDMSG_PLAIN, 8010, CR_ORANGE, 0.5, 0.15, 5.0);
        HudMessageBold(i:AchiveKillInSEc10, s:" kills in 10 sec!";
                        HUDMSG_PLAIN, 8011, CR_ORANGE, 0.5, 0.17, 5.0);
        //PrintBold(s:"Good work!\n", i:AchiveKillInSEc10, s:" kills in 10 sec!");
        AchiveKillInSEc10 = 0;
        terminate;
    }

    AchiveKillInSEc10 = 0;
}

script "AchiveKillInSEc1Counter" (void){

    //GiveActorInventory(0, "DSCarmorBonus", 5);
    delay(35);
    //PrintBold(i:AchiveKillInSEc1);

    if ( AchiveDieInSec1 >= 20 || AchiveKillInSEc1 >= 20 ){

        ACS_NamedExecuteAlways("SerialKiller", 0, AchiveKillInSEc1);
        //ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
        /*if(BE()){
                GiveActorInventory(0, "D4QuadDamage", 1);
                GiveActorInventory(0, "d4haste", 1);
        }*/
        Log(s:"Real epic doomslayer tolal bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
        AchiveKillInSEc1 = 0;
        AchiveDieInSec1 = 0;
        ACS_NamedExecute("TimeKillVoiceSec1", 0, 6);
        SaintHealthUpMultipler += AchiveKillInSEc1;

        if( BE() ){ GiveActorInventory(0, "d4haste", 1); }

        terminate;
    }

    if (AchiveDieInSec1 >= 15 ){

        ACS_NamedExecuteAlways("SerialKiller", 0, AchiveKillInSEc1);
        //ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
        /*if(Random(1, 100)<=40 && BE()){
                GiveActorInventory(0, "D4QuadDamage", 1);
        }
        if(Random(1, 100)<=60 && BE()){
                GiveActorInventory(0, "d4haste", 1);
        }*/
        Log(s:"Tolal bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
        AchiveKillInSEc1 = 0;
        AchiveDieInSec1 = 0;
        ACS_NamedExecute("TimeKillVoiceSec1", 0, 5);
        SaintHealthUpMultipler += AchiveKillInSEc1;

        if( BE() ){ GiveActorInventory(0, "d4haste", 1); }

        terminate;
    }

    if ( AchiveDieInSec1 >= 10 ){

        ACS_NamedExecuteAlways("SerialKiller", 0, AchiveKillInSEc1);
        //ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
        /*if(Random(1, 100)<=30 && BE()){
                GiveActorInventory(0, "D4QuadDamage", 1);
        }
        if(Random(1, 100)<=50 && BE()){
                GiveActorInventory(0, "d4haste", 1);
        }*/
        Log(s:"Yeah...Great bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
        AchiveKillInSEc1 = 0;
        AchiveDieInSec1 = 0;
        ACS_NamedExecute("TimeKillVoiceSec1", 0, 4);
        SaintHealthUpMultipler += AchiveKillInSEc1;
        terminate;
    }

    if ( AchiveDieInSec1 >= 5 ){

        ACS_NamedExecuteAlways("SerialKiller", 0, AchiveKillInSEc1);
        //if( BE() ){ GiveActorInventory(0, "d4haste", 1); }
    }

    if ( AchiveDieInSec1 > 3 ){

        ACS_NamedExecuteAlways("SerialKiller", 0, AchiveKillInSEc1);
        //ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
        /*if(Random(1, 100)<=20 && BE()){
                GiveActorInventory(0, "D4QuadDamage", 1);
        }
        if(Random(1, 100)<=40 && BE()){
                GiveActorInventory(0, "d4haste", 1);
        }*/

        Log(s:"Bloody mess!\n", i:AchiveDieInSec1, s:" kills in sec!");
        AchiveKillInSEc1 = 0;
        AchiveDieInSec1 = 0;
        ACS_NamedExecute("TimeKillVoiceSec1", 0, 3);
        SaintHealthUpMultipler += AchiveKillInSEc1;
        terminate;
    }

    if ( AchiveKillInSEc1 == 3 ){

        ACS_NamedExecuteAlways("SerialKiller", 0, AchiveKillInSEc1);
        //ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
        /*if(Random(1, 100)<=15 && BE()){
                GiveActorInventory(0, "D4QuadDamage", 1);
        }
        if(Random(1, 100)<=30 && BE()){
                GiveActorInventory(0, "d4haste", 1);
        }*/
        Log(s:"Tripple death\n", i:AchiveKillInSEc1, s:" kills in sec!");
        AchiveKillInSEc1 = 0;
        AchiveDieInSec1 = 0;
        ACS_NamedExecute("TimeKillVoiceSec1", 0, 2);
        SaintHealthUpMultipler += AchiveKillInSEc1;
        terminate;
    }

    if ( AchiveKillInSEc1 == 2 ){

        ACS_NamedExecuteAlways("SerialKiller", 0, AchiveKillInSEc1);
        //ACS_NamedExecuteAlways("ArmorBonus", 0, AchiveKillInSEc1, 1);
        /*if(Random(1, 100)<=20 && BE()){
                GiveActorInventory(0, "d4haste", 1);
        }*/

        Log(s:"Double death\n", i:AchiveKillInSEc1, s:" kills in sec!");
        AchiveKillInSEc1 = 0;
        AchiveDieInSec1 = 0;
        ACS_NamedExecute("TimeKillVoiceSec1", 0, 1);
        SaintHealthUpMultipler += 2;
        terminate;
    }

    AchiveKillInSEc1 = 0;
    AchiveDieInSec1 = 0;
}

script "TimeKillVoiceSec1" (int soundID){

    //ACS_NamedExecuteAlways("MuteMusic", 0, 35+15);
    delay(15);

    for (int i = 0; i<=9; i++){

        SoundVolume (0, i, 0.0);
    }

    switch (soundID) {

        case 1:
            PlaySound (0, "DSCACHV2R" , 64, 1.0, false, ATTN_NONE);
            break;
        case 2:
            PlaySound (0, "world/DSCACHV4" , 64, 1.0, false, ATTN_NONE);
            break;
        case 3:
            PlaySound (0, "world/DSCACHV5" , 64, 1.0, false, ATTN_NONE);
            break;
        case 4:
            PlaySound (0, "world/DSCACHV6" , 64, 1.0, false, ATTN_NONE);
            break;
        case 5:
            PlaySound (0, "world/DSCACHV7" , 64, 1.0, false, ATTN_NONE);
            break;
        case 6:
            PlaySound (0, "world/DSCACHV8" , 64, 1.0, false, ATTN_NONE);
            break;
    }

    delay(35);

    for ( i = 0; i<=9; i++){

        SoundVolume (0, i, 1.0);
    }
}

script "SaintHealthUp" (void){

    SetResultValue( SaintHealthUpMultipler * SaintHealthUpBaseAmount );
    SaintHealthUpMultipler = 0;
}

/*
Script "ArmorBonus" (int amount, int multipler){
	if(multipler<=0){multipler=1;}
	switch (DSCplayerRank) {
		case 1:
			multipler = 1;
			break;
		case 2:
			multipler = 2;
			break;
		case 3:
			multipler = 3;
			break;
		case 4:
			multipler = 4;
			break;
		case 5:
			multipler = 5;
			break;
		case 6:
			multipler = 6;
			break;
		case 7:
			multipler = 7;
			break;
		case 8:
			multipler = 8;
			break;
		case 9:
			multipler = 9;
			break;
		default:
			terminate;
	}
	GiveActorInventory(0, "DSCarmorBonus", amount*multipler);
}*/
