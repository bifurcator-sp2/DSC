//////////////LIBRARY

global int 1:AmmoMaxRnd;
global int 2:WeaponGotID;
global int 3:CurrentWave;
global int 4:TotalKills;
global BOOL 5:Atrium1Active;
global int 6:MonsterCountMethod;
global int 7:DSCplayerRank;


#define shotGunSpawnProgressInPercent 3
#define SSGSpawnProgressInPercent 15
#define ChaingunSpawnProgressInPercent 30
#define RLSpawnProgressInPercent 50
#define PlasmaGunSpawnProgressInPercent 70
#define BFG9000SpawnProgressInPercent 80

#define maxWaveCount 50
bool isBE = false;
Bool NextWaveReady = false;
Bool WaveOnline = false;
Bool IgnoreWaveMusicChange = false;
int SpawnedMonstersOnTheMap = 0;
int DSCscreenFade = 0;//for DSCranks
bool waitForWeaponSpawnedMassage = false;
bool waitForScullSpawnedMassage = false;
int KilledWaveStart = 0;
int killedPerWave = 0;

bool NOspawn = false; //dev staff


int SaintHealthUpMultipler = 0; //current health up for Zscript for DSCprisonedSaint
int SaintHealthUpBaseAmount = 10;//basic value for SaintHealthUp DSCprisonedSaint
//


bool OverrideDeathBugFIX = false;
script "DeathBufFIX" DEATH  {
//this is check for death restart clear inventory bug
			delay(35*2);
			currentWave = 0;
			DSCplayerRank = 0;
			TotalKills = 0;
			CurrentWave = 0;
			AmmoMaxRnd = 0;
			WeaponGotID = 0;
			ChangeLevel ("DSCMAP01", 0, CHANGELEVEL_NOINTERMISSION|CHANGELEVEL_RESETHEALTH|CHANGELEVEL_RESETINVENTORY);

//----------------------------------------------------
}




Script "GetAmmoSlot" (void)
{
	SetResultValue(Random(0,AmmoMaxRnd));
}
Script "GetWeaponGotID" (void)
{
SetResultValue(WeaponGotID);
}
Script "GetWeaponGotIDforWeaponSpawner" (void)
{
	int WeaponID;
	//WeaponGotID - actual weapon num
	//1. ShotgunGot
	//2. ssgGot
	//3. ChaingunGot
	//4. RLCGot
	//5. PlasmaGot
	//6. BfgGot
	//Log(s:"Weapon randomizator ", d:WeaponGotID);
	switch (WeaponGotID) {
		case 1:
			if(CheckInventory("ShotgunGot")>0){
				if(Random(1, 100)<=80){WeaponID = 1;}else{WeaponID = 2;}
			} else {
				GiveInventory("ShotgunGot", 1);
				WeaponID = 1;
			}
			ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
			break;
		case 2:
			//Log(s:"Try SSG ");
			if(CheckInventory("ssgGot")>0){
				//Log(s:"It is no ssg now");
				if(Random(1, 100)<=50){WeaponID = Random(1, WeaponGotID);}else{WeaponID = WeaponGotID;}
				Log(s:"Randomised to ", d:WeaponID);
			} else {
				GiveInventory("ssgGot", 1);
				WeaponID = WeaponGotID;
				//Log(s:"Gived SSG ", d:WeaponID);
			}
			ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
			break;
		case 3:
			if(CheckInventory("ChaingunGot")>0){
				if(Random(1, 100)<=50){WeaponID = Random(1, WeaponGotID);}else{WeaponID = WeaponGotID;}
			} else {
				GiveInventory("ChaingunGot", 1);
				WeaponID = WeaponGotID;
			}
			ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
			break;
		case 4:
			if(CheckInventory("RLCGot")>0){
				if(Random(1, 100)<=50){WeaponID = Random(1, WeaponGotID);}else{WeaponID = WeaponGotID;}
			} else {
				GiveInventory("RLCGot", 1);
				WeaponID = WeaponGotID;
			}
			ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
			break;
		case 5:
			if(CheckInventory("PlasmaGot")>0){
				if(Random(1, 100)<=50){WeaponID = Random(1, WeaponGotID);}else{WeaponID = WeaponGotID;}
			} else {
				GiveInventory("PlasmaGot", 1);
				WeaponID = WeaponGotID;
			}
			ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
			break;
		case 6:
			if(CheckInventory("BfgGot")>0){
				if(Random(1, 100)<=50){WeaponID = Random(1, WeaponGotID);}else{WeaponID = WeaponGotID;}
			} else {
				GiveInventory("BfgGot", 1);
				WeaponID = WeaponGotID;
			}
			ACS_NamedExecute("DisplaySpawnedWeaponMessage", 0, WeaponID);
			break;
		default:
			WeaponID = 1;
		}
		//Log(s:"Rezulted to ", d:WeaponID);
	SetResultValue(WeaponID);
}

Script "DisplaySpawnedWeaponMessage" (int WeaponID){
	switch (WeaponID) {
		case 1:
			HudMessageBold(s:"Shotgun spawned";
				HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
			//PrintBold(s:"Shotgun spawned");
			break;
		case 2:
			HudMessageBold(s:"SuperShotgun spawned";
				HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
			//PrintBold(s:"SuperShotgun spawned");
			break;
		case 3:
			HudMessageBold(s:"Chaingun spawned";
				HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
			//PrintBold(s:"Chaingun spawned");
			break;
		case 4:
			HudMessageBold(s:"RocketLauncher spawned";
				HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
			//PrintBold(s:"RocketLauncher spawned");
			break;
		case 5:
			HudMessageBold(s:"PlasmaRifle spawned";
				HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
			//PrintBold(s:"PlasmaRifle spawned");
			break;
		case 6:
			HudMessageBold(s:"BFG9000 spawned";
				HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
			//PrintBold(s:"BFG9000 spawned");
			break;
		default:
			HudMessageBold(s:"Weapon spawned";
				HUDMSG_PLAIN, 8005, CR_ORANGE, 0.5, 0.6, 5.0);
			//PrintBold(s:"Something spawned");
			break;
	}
}

Script "GetProgress" (void)
{
	SetResultValue((currentWave * 100) / maxWaveCount);
}

Script "GetLiveMonstersCount" (void)
{
	SetResultValue(SpawnedMonstersOnTheMap);
}


Script "NewMonsterIsSpawned" (int monstersCount)
{
	SpawnedMonstersOnTheMap = monstersCount;
}

function bool BEorvanilla (void){
	if (CheckActorClass(0, "BEDoomer") || CheckActorClass(0, "BESemiDoomer") || CheckActorClass(0, "DoomPlayer")){
		return true;
	}
	return false;
}
function bool BE (void){
	if (isBE){
		return true;
	}
	return false;
}
Script "BE" (void)
{
	if (isBE){
		SetResultValue(true);
		terminate;
	}
	SetResultValue(false);
}

function int GetTotalMonsters(void)
{

	if (!BEorvanilla()){
		return SpawnedMonstersOnTheMap;
	}
	return ThingCount(T_NONE, 666666);
}




Script "DisplayInfo" ENTER
{

	//ACS_NamedExecute("DisplayWaveStats", 0, 5, 3100000);

	if (CheckActorClass(0, "BEDoomer") || CheckActorClass(0, "BESemiDoomer")){
		isBE = true;
	} else { isBE = false; }

	while (TRUE) {
		int mtotal = GetTotalMonsters();
		int progress = (currentWave * 100) / maxWaveCount;

		SetFont("SMALLFONT");

		HudMessage(
		d:mtotal, s:" demons on map";
		HUDMSG_PLAIN,779,CR_DARKBROWN,0.2,0.039,1,0);

		HudMessage(
		d:progress, s:"%", s:" progress";
		HUDMSG_PLAIN,780,CR_DARKBROWN,0.8,0.039,1,0);
		Delay(35);
	}
}
//TotalKills

script "SpawnWave" (int zoneTid, int ScullTag, int WeaponTag)
{

		if( ScullTag != 888888 ){
			WaveOnline = true;
			KilledWaveStart = GetLevelInfo (LEVELINFO_KILLED_MONSTERS);

			if(!NOspawn){//debug thing
				Delay(35*3);
				//AmbientSound("Howling",127);
				PlaySound(0, "Howling", CHAN_AUTO, 1.0,  false, ATTN_NONE );
				Delay(35*3);

				for(int i = 5; i > 0; i--)
				{
					Print(s:"Wave will come in ",d:i,s:" seconds");
					Delay(35);
				}
			}

		}
		if(!NOspawn){
			Thing_Activate(zoneTid);
		}
		if( ScullTag != 888888 ){
			if(!NOspawn){ //debug thing
				Delay(35*30);
			}
			while ( GetTotalMonsters()>0){ Delay(35); }
			//AmbientSound("WAVEDONE",127);
			PlaySound(0, "WAVEDONE", CHAN_AUTO, 1.0,  false, ATTN_NONE );
			killedPerWave = GetLevelInfo (LEVELINFO_KILLED_MONSTERS)-KilledWaveStart;
			ACS_NamedExecute("DisplayWaveStats", 0, killedPerWave, TotalKills+GetLevelInfo (LEVELINFO_KILLED_MONSTERS));
			//PrintBold(s:"Wave ", d:CurrentWave+1,  s:" complete!");

			CurrentWave ++;

			if(!NOspawn){//debug thing
				Delay(35*3);
			}
			Thing_Destroy(666667,0,0);//Previusly spawned vanilla weapon
			if(!NOspawn){//debug thing
				Delay(35*1);
			}
			ACS_NamedExecute("SpawnWeapon", 0, WeaponTag);

			if(!NOspawn){//debug thing

				Delay(35*3);
			}

			ACS_NamedExecuteAlways("RestoreMusic", 0);
			SpawnSpotFacingForced("WaveScullDEC", ScullTag, 100600);
			SetThingSpecial(100600, ACS_NamedExecute, "NextWaveReady");
			WaveOnline = false;


			if(getRank()>DSCplayerRank){
				Delay(35*3);
				ACS_NamedExecuteAlways("DisplayNextRank", 0);
			}


		}
}
script "DisplayWaveStats" (int PerWave, int Total){
		SetHudSize(800, 600, 0);
		SetFont("WAVeLINE");
		HudMessageBold(s:"A";
			HUDMSG_PLAIN|HUDMSG_LAYER_UNDERHUD, 399, CR_GOLD, 400.0, 270.0, 0);
		SetFont("BIGFONT");
		SetHudSize(640, 480, 0);
		delay(1);
		HudMessageBold(s:"Wave ", d:CurrentWave+1,  s:" complete!";
			HUDMSG_PLAIN, 400, CR_GOLD, 320.0, 180.0, 0);
		SetFont("SMALLFONT");
		HudMessageBold(s:"Kills per wave: ", d:PerWave;
			HUDMSG_PLAIN, 401, CR_GOLD, 320.0, 200.0, 0);
		HudMessageBold(s:"Total kills: ", d:Total;
			HUDMSG_PLAIN, 402, CR_GOLD, 320.0, 210.0, 0);
		ACS_NamedExecuteAlways("DisplayLeftGliph", 0, PerWave);
		ACS_NamedExecuteAlways("DisplayRightsGliph", 0, Total);
		delay(35*7);
		HudMessageBold(s:""; HUDMSG_PLAIN, 399, CR_GOLD, 0.5, 0.3, 0);
		HudMessageBold(s:""; HUDMSG_PLAIN, 400, CR_GOLD, 0.5, 0.3, 0);
		HudMessageBold(s:""; HUDMSG_PLAIN, 401, CR_GOLD, 0.5, 0.3, 0);
		HudMessageBold(s:""; HUDMSG_PLAIN, 402, CR_GOLD, 0.5, 0.3, 0);

		SetHudSize(0, 0, 0);
}

script "DisplayLeftGliph" (int num){
	SetHudSize(800, 600, 0);
	SetFont("BIGFONT");
	int cat = GetCat(num);
	int catNum = GetCatNum(num);
	HudMessageBold(d:catNum, s:" X ", d:cat;
	HUDMSG_PLAIN, 403, CR_RED, 150.0, 250.0, 7.0);

	SetFont(GetGliph (num));
	HudMessageBold(s:"A"; HUDMSG_PLAIN, 404, CR_RED, 150.0, 175.0, 7.0);
	SetHudSize(0, 0, 0);
}
script "DisplayRightsGliph" (int num){
	SetHudSize(800, 600, 0);
	SetFont("BIGFONT");
	int cat = GetCat(num);
	int catNum = GetCatNum(num);
	HudMessageBold(d:catNum, s:" X ", d:cat;
	HUDMSG_PLAIN, 405, CR_RED, 800.0-150.0, 250.0, 7.0);

	SetFont(GetGliph (num));
	HudMessageBold(s:"A"; HUDMSG_PLAIN, 406, CR_RED, 800.0-150.0, 175.0, 7.0);
	SetHudSize(0, 0, 0);
}

function str GetGliph (int num) {
	if(num*0.0001>>16 >= 100) { return "decgl6";}
	if(num*0.0001>>16 >= 10) { return "decgl5";}
	if(num*0.0001>>16 >= 1) { return "decgl4";}
	if(num*0.001>>16 >= 1) { return "decgl3";}
	if(num*0.01>>16 >= 1) { return "decgl2";}
	if(num*0.1>>16 >= 1) { return "decgl1";}
	return "decgl0";
}

function int GetCat  (int num){
	if(num*0.0001>>16 >= 100) { return 1000000;}
	if(num*0.0001>>16 >= 10) { return 100000;}
	if(num*0.0001>>16 >= 1) { return 10000;}
	if(num*0.001>>16 >= 1) { return 1000;}
	if(num*0.01>>16 >= 1) { return 100;}
	if(num*0.1>>16 >= 1) { return 10;}
	return 1;
}

function int GetCatNum (int num){
	int cat = GetCat(num);
	int CatNum = num/cat;
	return CatNum;
	//return ceil(num/cat)/65536;
}


script "NextWaveReady" (void){	NextWaveReady = true; }
function bool GetDSCscreenFade(void){ if(DSCscreenFade>0){ return true; } return false; }
script "SpawnWeapon" (int WeaponTag)
{

	//PrintBold(s:"Your progress ", d:progression, s:"%");
	delay(35*2);
	while(GetDSCscreenFade()){
		delay(5);
	}
	if(!WeaponTag){WeaponTag = 100400; }
	int progression = (currentWave * 100) / maxWaveCount ;
	//Thing_Remove(666667);
	if(progression >= shotGunSpawnProgressInPercent && WeaponGotID<1)
	{

		AmmoMaxRnd = 1;
		WeaponGotID = 1;
		//PrintBold(s:"Shotgun spawned");

		//Thing_Activate(WeaponTag);
	}
	else if (progression >= SSGSpawnProgressInPercent && WeaponGotID<2)
	{

		WeaponGotID = 2;
		//PrintBold(s:"SuperShotgun spawned");

		//Thing_Activate(WeaponTag);
	}
	else if (progression >= ChaingunSpawnProgressInPercent && WeaponGotID<3)
	{

		WeaponGotID = 3;
		//Thing_Destroy(666667,0,0);
		//PrintBold(s:"Chaingun spawned");
		//Thing_Activate(WeaponTag);
	}
	else if (progression >= RLSpawnProgressInPercent && WeaponGotID<4)
	{

		WeaponGotID = 4;
		AmmoMaxRnd = 2;
		//PrintBold(s:"RocketLauncher spawned");

		//Thing_Activate(WeaponTag);
	}
	else if (progression >= PlasmaGunSpawnProgressInPercent && WeaponGotID<5)
	{

		WeaponGotID = 5;
		AmmoMaxRnd = 3;
		//PrintBold(s:"PlasmaRifle spawned");

		//Thing_Activate(WeaponTag);
	}
	else if (progression >= BFG9000SpawnProgressInPercent && WeaponGotID<6)
	{

		WeaponGotID = 6;
		//PrintBold(s:"BFG9000 spawned");
		//Thing_Activate(WeaponTag);
	}
	//PrintBold(d:WeaponGotID);
	if(WeaponGotID>=1){
		Thing_Activate(WeaponTag);
	}
}


Script "ScullHasCome" (void){
	while(DSCscreenFade>0){
		delay(1);
	}
	delay(35*3);//to not intersect with weapon spawn message
	PrintBold(s:"Mystic Scull has arrived.\nPick it up for continiue.");
}


Script "Mus_G1" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_G1", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_G2" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_G2", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_G3" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_G3", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_L1" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_L1", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_M1" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_M1", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_M2" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_M2", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_M3" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTL_M3", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_SM1" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTLsm1", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_SM2" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTLsm2", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "Mus_SM3" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("BTTLsm3", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}


Script "Mus_TITLEMAP" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("MAINTTL", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
Script "RestoreMusic" (void){
	if(!IgnoreWaveMusicChange){
		ACS_NamedExecuteAlways("FadeOutMusic", 0);
		Delay(100);
		SetMusic("*", 0);
		ACS_NamedExecuteAlways("FadeInMusic", 0);
	}
}
/////////////////////////////
Script "GiveFirstEpisodeDoneItems" (void){
	if(CheckInventory("map06done")==0){
		GiveInventory("map01done", 1);
		GiveInventory("map02done", 1);
		GiveInventory("map03done", 1);
		GiveInventory("map04done", 1);
		GiveInventory("map05done", 1);
		GiveInventory("map06done", 1);
	}
}



//END LIBRARY
